#/* Bulletins de paie */
bdp <- "paies-Bulletins de paye-1.csv"
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"))
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
ldp <- ldp[file.exists(chemin(ldp))]
Ldp<-Read.csv(ldp)
#/* Equivaut à :
# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)
# ...
# ldp <- rbind(ldp1,ldp2,...)
# Bulletin de paie  */
Bdp <- read.csv.skip(bdp)
#Matricule.categorie <- read.csv.skip(matricule.categorie)
Code.prime          <- read.csv.skip(code.prime)
#Matricule.avantage  <- read.csv.skip(matricule.avantage)
#suppression des colonnes Nom Prénom redondantes
#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.categorie)
Bdp                 <- selectionner.cle.matricule(Bdp, Ldp)
#fusion matricule | avantage | catégorie par Matricule
Bdp.ldp <- merge(Bdp, Ldp, by="Matricule", all=FALSE)
View(Bdp.ldp)
View(Bdp)
Bdp <- read.csv.skip(bdp)
View(Bdp)
Bdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)
source('~/Dev/Altair/altair/Reports/Sierg/sierg.R', echo=TRUE)
View(Bdp)
View(Ldp)
setdiff(Bdp,Ldp)
setdiff(names(Bdp),names(Ldp))
source('~/Dev/Altair/altair/Reports/Sierg/sierg.R', echo=TRUE)
View(Bdp)
View(Ldp)
View(Bdp.ldp)
source('~/Dev/Altair/altair/Reports/Sierg/sierg.R', echo=TRUE)
View(Bdp)
View(Ldp)
View(Bdp)
intersect(names(Ldp), names(Bdp))
#'---
#'title: "RH Sierg"
#'author: "Fabrice Nicol"
#'date: false
#'output:
#'html_document:
#'css: /home/fab/style.css
#'---
#+ echo=FALSE
library(compiler)
library(xtable)
options(warn=-1, verbose=FALSE, OutDec=",")
compilerOptions <- setCompilerOptions(suppressAll=TRUE)
JITlevel <- enableJIT(3)
#/*---------------------------------------------------------------------------------------------------------------------
#  Chemins et variables globales du programme
##
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes, Avantages en nature */
chemin.dossier <- "/home/fab/Dev/Altair/altair/Reports/Sierg"
champ.detection.1 <- "Matricule"
champ.detection.2 <- "Code"
matricule.categorie <- "LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv"
code.prime          <- "LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv"
matricule.avantage  <- "LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv"
code.traitement <- 1010
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
ldp <- paste0("paies-Lignes de paye-",1:10,".csv")
#/* Bulletins de paie */
bdp <- "paies-Bulletins de paye-1.csv"
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"))
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
ldp <- ldp[file.exists(chemin(ldp))]
Ldp<-Read.csv(ldp)
#/* Equivaut à :
# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)
# ...
# ldp <- rbind(ldp1,ldp2,...)
# Bulletin de paie  */
Bdp <- read.csv.skip(bdp)
#Matricule.categorie <- read.csv.skip(matricule.categorie)
Code.prime          <- read.csv.skip(code.prime)
#Matricule.avantage  <- read.csv.skip(matricule.avantage)
#suppression des colonnes Nom Prénom redondantes
#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.categorie)
Bdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)
if (intersect(names(Ldp), names(Bdp)) != c("Matricule", "Mois"))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
intersect(names(Ldp), names(Bdp)
intersect(names(Ldp), names(Bdp))
class(intersect(names(Ldp), names(Bdp)))
#'---
#'title: "RH Sierg"
#'author: "Fabrice Nicol"
#'date: false
#'output:
#'html_document:
#'css: /home/fab/style.css
#'---
#+ echo=FALSE
library(compiler)
library(xtable)
options(warn=-1, verbose=FALSE, OutDec=",")
compilerOptions <- setCompilerOptions(suppressAll=TRUE)
JITlevel <- enableJIT(3)
#/*---------------------------------------------------------------------------------------------------------------------
#  Chemins et variables globales du programme
##
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes, Avantages en nature */
chemin.dossier <- "/home/fab/Dev/Altair/altair/Reports/Sierg"
champ.detection.1 <- "Matricule"
champ.detection.2 <- "Code"
matricule.categorie <- "LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv"
code.prime          <- "LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv"
matricule.avantage  <- "LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv"
code.traitement <- 1010
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
ldp <- paste0("paies-Lignes de paye-",1:10,".csv")
#/* Bulletins de paie */
bdp <- "paies-Bulletins de paye-1.csv"
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"))
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
ldp <- ldp[file.exists(chemin(ldp))]
Ldp<-Read.csv(ldp)
#/* Equivaut à :
# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)
# ...
# ldp <- rbind(ldp1,ldp2,...)
# Bulletin de paie  */
Bdp <- read.csv.skip(bdp)
#Matricule.categorie <- read.csv.skip(matricule.categorie)
Code.prime          <- read.csv.skip(code.prime)
#Matricule.avantage  <- read.csv.skip(matricule.avantage)
#suppression des colonnes Nom Prénom redondantes
#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.categorie)
Bdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)
if (intersect(names(Ldp), names(Bdp)) != c("Mois", "Matricule"))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
c("Mois", "Matricule") %in% c("Matricule, "Mois")
c("Mois", "Matricule") %in% c("Matricule", "Mois")
c("Mois", "Mois") %in% c("Matricule", "Mois")
union("a", "b")
union(c("a", "b"), c("b", "c"))
setdiff(c("Mois", "Matricule")  c("Matricule", "Mois"))
setdiff(c("Mois", "Matricule"),  c("Matricule", "Mois"))
setdiff(c("Mois", "Mois"),  c("Matricule", "Mois"))
union(c("Mois", "Matricule"),  c("Matricule", "Mois"))
setequal(c("Mois", "Matricule"),  c("Matricule", "Mois"))
setequal(c("Moi", "Matricule"),  c("Matricule", "Mois"))
setequal(c("Mois", "Matricule"),  c("Matricule", "Mois"))
setequal(c("Matricule", "Mois"),  c("Matricule", "Mois"))
summary(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ])
sub("M.*:", "OK", summary(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ]))
sub("([M13].*:", "OK", summary(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ]))
sub("[M13].*:", "OK", summary(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ]))
summary(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ])
Résumé <- function(x,...) {sub("[M13].*:", "", summary(x,...))  }
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ])
#'---
#'title: "RH Sierg"
#'author: "Fabrice Nicol"
#'date: false
#'output:
#'html_document:
#'css: /home/fab/style.css
#'---
#+ echo=FALSE
library(compiler)
library(xtable)
options(warn=-1, verbose=FALSE, OutDec=",")
compilerOptions <- setCompilerOptions(suppressAll=TRUE)
JITlevel <- enableJIT(3)
#/*---------------------------------------------------------------------------------------------------------------------
#  Chemins et variables globales du programme
##
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes, Avantages en nature */
chemin.dossier <- "/home/fab/Dev/Altair/altair/Reports/Sierg"
champ.détection.1 <- "Matricule"
champ.détection.2 <- "Code"
matricule.catégorie <- "LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv"
code.prime          <- "LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv"
matricule.avantage  <- "LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv"
code.traitement <- 1010
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
ldp <- paste0("paies-Lignes de paye-",1:10,".csv")
#/* Bulletins de paie */
bdp <- "paies-Bulletins de paye-1.csv"
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
source(file.path(chemin.dossier, "bibliothèque.fonctions.paie.R"))
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
ldp <- ldp[file.exists(chemin(ldp))]
Ldp<-Read.csv(ldp)
#/* Equivaut à :
# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)
# ...
# ldp <- rbind(ldp1,ldp2,...)
# Bulletin de paie  */
Bdp <- read.csv.skip(bdp)
#Matricule.catégorie <- read.csv.skip(matricule.catégorie)
Code.prime          <- read.csv.skip(code.prime)
#Matricule.avantage  <- read.csv.skip(matricule.avantage)
#suppression des colonnes Nom Prénom redondantes
#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.catégorie)
Bdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)
if (!setequal(intersect(names(Ldp), names(Bdp)), c("Mois", "Matricule")))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
#fusion matricule | avantage | catégorie par Matricule
Bdp.ldp <- merge(Bdp, Ldp)
library(plyr)
Bdp.ldp2 <- mutate(Bdp.ldp,
montant.traitement.indiciaire = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "TRAITEMENT","Code.rubrique"]),
montant.primes = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "INDEMNITAIRE.OU.CONTRACTUEL","Code.rubrique"]),
montant.autres.rémunérations = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "AUTRES","Code.rubrique"]),
warn=-1
)
Analyse.rémunérations <- ddply(Bdp.ldp2,
c("Matricule", "Service"),
summarize,
traitement.indiciaire = sum(montant.traitement.indiciaire),
rémunération.contractuelle.ou.indemnitaire = sum(montant.primes),
autres.rémunérations                       = sum(montant.autres.rémunérations),
total.rémunérations                        = traitement.indiciaire
+ rémunération.contractuelle.ou.indemnitaire
+ autres.rémunérations,
part.rémunération.contractuelle.ou.indemnitaire =
ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,
rémunération.contractuelle.ou.indemnitaire /
(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))
attach(Analyse.rémunérations, warn.conflicts=FALSE)
#'# 1. Fonctionnaires titulaires et stagiaires
#+ echo=FALSE
hist(total.rémunérations[traitement.indiciaire > 0 ]/1000,
xlab="Distribution de la rémunération en k€\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
xlim=c(0, 120),
main="Rémunération annuelle des fonctionnaires",
col="blue",
nclass=50
)
hist(rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 ]/1000,
xlab="Distribution des attributions indemnitaires en k€\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
xlim=c(0, 70),
main="Rémunération indemnitaire annuelle des fonctionnaires",
col="blue",
nclass=50
)
hist(part.rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 & part.rémunération.contractuelle.ou.indemnitaire >0],
xlab="Pourcentage des indemnités dans la rémunération\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
main="Distribution de la part indemnitaire\n de la rémunération annuelle des fonctionnaires",
xlim=c(0,60),
col="blue",
nclass=30
)
#/* La moyenne est tirée vers le haut par les outlyers */
Stats.fonctionnaires <- Résumé(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ])
Stats.fonctionnaires
Résumé <- function(x,...) {cbind(c("Minimum", "1er quartile", "Médiane", "Moyenne", "3ème quartile", "Maximum"), sub("[M13].*:", "", summary(x,...)))  }
#'---
#'title: "RH Sierg"
#'author: "Fabrice Nicol"
#'date: false
#'output:
#'html_document:
#'css: /home/fab/style.css
#'---
#+ echo=FALSE
library(compiler)
library(xtable)
options(warn=-1, verbose=FALSE, OutDec=",")
compilerOptions <- setCompilerOptions(suppressAll=TRUE)
JITlevel <- enableJIT(3)
#/*---------------------------------------------------------------------------------------------------------------------
#  Chemins et variables globales du programme
##
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes, Avantages en nature */
chemin.dossier <- "/home/fab/Dev/Altair/altair/Reports/Sierg"
champ.détection.1 <- "Matricule"
champ.détection.2 <- "Code"
matricule.catégorie <- "LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv"
code.prime          <- "LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv"
matricule.avantage  <- "LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv"
code.traitement <- 1010
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
ldp <- paste0("paies-Lignes de paye-",1:10,".csv")
#/* Bulletins de paie */
bdp <- "paies-Bulletins de paye-1.csv"
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
source(file.path(chemin.dossier, "bibliothèque.fonctions.paie.R"))
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
ldp <- ldp[file.exists(chemin(ldp))]
Ldp<-Read.csv(ldp)
#/* Equivaut à :
# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)
# ...
# ldp <- rbind(ldp1,ldp2,...)
# Bulletin de paie  */
Bdp <- read.csv.skip(bdp)
#Matricule.catégorie <- read.csv.skip(matricule.catégorie)
Code.prime          <- read.csv.skip(code.prime)
#Matricule.avantage  <- read.csv.skip(matricule.avantage)
#suppression des colonnes Nom Prénom redondantes
#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.catégorie)
Bdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)
if (!setequal(intersect(names(Ldp), names(Bdp)), c("Mois", "Matricule")))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
#fusion matricule | avantage | catégorie par Matricule
Bdp.ldp <- merge(Bdp, Ldp)
library(plyr)
Bdp.ldp2 <- mutate(Bdp.ldp,
montant.traitement.indiciaire = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "TRAITEMENT","Code.rubrique"]),
montant.primes = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "INDEMNITAIRE.OU.CONTRACTUEL","Code.rubrique"]),
montant.autres.rémunérations = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "AUTRES","Code.rubrique"]),
warn=-1
)
Analyse.rémunérations <- ddply(Bdp.ldp2,
c("Matricule", "Service"),
summarize,
traitement.indiciaire = sum(montant.traitement.indiciaire),
rémunération.contractuelle.ou.indemnitaire = sum(montant.primes),
autres.rémunérations                       = sum(montant.autres.rémunérations),
total.rémunérations                        = traitement.indiciaire
+ rémunération.contractuelle.ou.indemnitaire
+ autres.rémunérations,
part.rémunération.contractuelle.ou.indemnitaire =
ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,
rémunération.contractuelle.ou.indemnitaire /
(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))
attach(Analyse.rémunérations, warn.conflicts=FALSE)
#'# 1. Fonctionnaires titulaires et stagiaires
#+ echo=FALSE
hist(total.rémunérations[traitement.indiciaire > 0 ]/1000,
xlab="Distribution de la rémunération en k€\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
xlim=c(0, 120),
main="Rémunération annuelle des fonctionnaires",
col="blue",
nclass=50
)
hist(rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 ]/1000,
xlab="Distribution des attributions indemnitaires en k€\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
xlim=c(0, 70),
main="Rémunération indemnitaire annuelle des fonctionnaires",
col="blue",
nclass=50
)
hist(part.rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 & part.rémunération.contractuelle.ou.indemnitaire >0],
xlab="Pourcentage des indemnités dans la rémunération\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
main="Distribution de la part indemnitaire\n de la rémunération annuelle des fonctionnaires",
xlim=c(0,60),
col="blue",
nclass=30
)
#/* La moyenne est tirée vers le haut par les outlyers */
Stats.fonctionnaires <- Résumé(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ])
dimnames(Stats.fonctionnaires)[[2]] <-  c("Traitement indiciaire",
"Rémunération contractuelle ou indemnitaire",
"Autres rémunérations",
"Total rémunérations",
"Part de la rémunération contractuelle ou indemnitaire")
#'---
#'title: "RH Sierg"
#'author: "Fabrice Nicol"
#'date: false
#'output:
#'html_document:
#'css: /home/fab/style.css
#'---
#+ echo=FALSE
library(compiler)
library(xtable)
options(warn=-1, verbose=FALSE, OutDec=",")
compilerOptions <- setCompilerOptions(suppressAll=TRUE)
JITlevel <- enableJIT(3)
#/*---------------------------------------------------------------------------------------------------------------------
#  Chemins et variables globales du programme
##
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes, Avantages en nature */
chemin.dossier <- "/home/fab/Dev/Altair/altair/Reports/Sierg"
champ.détection.1 <- "Matricule"
champ.détection.2 <- "Code"
matricule.catégorie <- "LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv"
code.prime          <- "LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv"
matricule.avantage  <- "LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv"
code.traitement <- 1010
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
ldp <- paste0("paies-Lignes de paye-",1:10,".csv")
#/* Bulletins de paie */
bdp <- "paies-Bulletins de paye-1.csv"
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
source(file.path(chemin.dossier, "bibliothèque.fonctions.paie.R"))
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
ldp <- ldp[file.exists(chemin(ldp))]
Ldp<-Read.csv(ldp)
#/* Equivaut à :
# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)
# ...
# ldp <- rbind(ldp1,ldp2,...)
# Bulletin de paie  */
Bdp <- read.csv.skip(bdp)
#Matricule.catégorie <- read.csv.skip(matricule.catégorie)
Code.prime          <- read.csv.skip(code.prime)
#Matricule.avantage  <- read.csv.skip(matricule.avantage)
#suppression des colonnes Nom Prénom redondantes
#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.catégorie)
Bdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)
if (!setequal(intersect(names(Ldp), names(Bdp)), c("Mois", "Matricule")))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
#fusion matricule | avantage | catégorie par Matricule
Bdp.ldp <- merge(Bdp, Ldp)
library(plyr)
Bdp.ldp2 <- mutate(Bdp.ldp,
montant.traitement.indiciaire = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "TRAITEMENT","Code.rubrique"]),
montant.primes = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "INDEMNITAIRE.OU.CONTRACTUEL","Code.rubrique"]),
montant.autres.rémunérations = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == "AUTRES","Code.rubrique"]),
warn=-1
)
Analyse.rémunérations <- ddply(Bdp.ldp2,
c("Matricule", "Service"),
summarize,
traitement.indiciaire = sum(montant.traitement.indiciaire),
rémunération.contractuelle.ou.indemnitaire = sum(montant.primes),
autres.rémunérations                       = sum(montant.autres.rémunérations),
total.rémunérations                        = traitement.indiciaire
+ rémunération.contractuelle.ou.indemnitaire
+ autres.rémunérations,
part.rémunération.contractuelle.ou.indemnitaire =
ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,
rémunération.contractuelle.ou.indemnitaire /
(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))
attach(Analyse.rémunérations, warn.conflicts=FALSE)
#'# 1. Fonctionnaires titulaires et stagiaires
#+ echo=FALSE
hist(total.rémunérations[traitement.indiciaire > 0 ]/1000,
xlab="Distribution de la rémunération en k€\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
xlim=c(0, 120),
main="Rémunération annuelle des fonctionnaires",
col="blue",
nclass=50
)
hist(rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 ]/1000,
xlab="Distribution des attributions indemnitaires en k€\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
xlim=c(0, 70),
main="Rémunération indemnitaire annuelle des fonctionnaires",
col="blue",
nclass=50
)
hist(part.rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 & part.rémunération.contractuelle.ou.indemnitaire >0],
xlab="Pourcentage des indemnités dans la rémunération\n hors politique familiale, indemnités journalières et remboursements",
ylab="Effectif",
main="Distribution de la part indemnitaire\n de la rémunération annuelle des fonctionnaires",
xlim=c(0,60),
col="blue",
nclass=30
)
#/* La moyenne est tirée vers le haut par les outlyers */
Stats.fonctionnaires <- Résumé(Analyse.rémunérations[traitement.indiciaire > 0,
c("traitement.indiciaire", "rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations", "total.rémunérations", "part.rémunération.contractuelle.ou.indemnitaire") ])
Stats.fonctionnaires
source('~/Dev/Altair/altair/Reports/Sierg/sierg.R', echo=TRUE)
