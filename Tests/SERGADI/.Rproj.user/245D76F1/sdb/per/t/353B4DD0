{
    "contents" : "#library(compiler)\n#enableJIT(3)\n\n##---------------------------------------------------------------------------------------------------------------------\n#  Chemins et variables globales du programme\n##\n\n# Cette section pourra être modifiée en entrée dans d'autres contextes\n# Matricule, Codes, Avantages en nature\n\nchemin.dossier <- \"C:/Documents and Settings/fnicol/Bureau/Informatique/VLB\"\n\nmatricule.categorie <- \"LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv\"     \ncode.prime          <- \"LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv\"\nmatricule.avantage  <- \"LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv\"\ncode.traitement <- 1010\n\n# Lignes de paie\n# On peut lire jusqu'à 10 fichiers csv qui seront générés au format\n#  \"chemin dossier + paies-Bulletins de paye-j.csv\"\n\nldp <- paste0(\"paies-Lignes de paye-\",1:10,\".csv\")\n\n# Bulletins de paie\n\nbdp <- \"paies-Bulletins de paye-1.csv\"\n\ncodes.NBI <- c(\"1012\", \"101B\", \"101M\", \"4652\", \"4672\")\n\n##---------------------------------------------------------------------------------------------------------------------\noptions(width=120, warn=-1)\nsource(file.path(chemin.dossier, \"bibliothèque.fonctions.paie.R\"), encoding=\"UTF-8\")\n\n# Programme principal\n\n##\n#  Bases\n##\n\n# Lignes de paie\n\nldp <- ldp[file.exists(chemin(ldp))]\n\nLdp<-Read.csv(ldp)\n\n\n\n# Equivaut à :\n# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)\n# ...\n# ldp <- rbind(ldp1,ldp2,...)\n\n# Bulletin de paie\n\nBdp <- read.csv.skip(bdp)\n\nMatricule.categorie <- read.csv.skip(matricule.categorie)\nCode.prime          <- read.csv.skip(code.prime)\nMatricule.avantage  <- read.csv.skip(matricule.avantage)\n\n#suppression des colonnes Nom Prénom redondantes\n\nMatricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.categorie) \nBdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)\n\n#fusion matricule | avantage | catégorie par Matricule\n\nBdp.ldp <- merge(Bdp, Ldp)\n\n#Codes <- Bdp.ldp[,c(\"Code\", \"Libellé\")]\nCodes.NT  <- Bdp.ldp[ ! Bdp.ldp$Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), c(\"Code\", \"Libellé\")]\nCodes.NT <- Codes[!duplicated(Codes.NT),]\n\nwrite.csv2(Codes.NT, chemin(\"Codes.NT.csv\"), row.names=FALSE)\n\nMatricule.categorie <- selectionner.cle.matricule(Matricule.categorie, Bdp.ldp)\n\n# Fusion étroite\nBase1 <- merge(Matricule.categorie, Bdp.ldp)\n\n# Fusion  large\nBase2 <- merge(Matricule.categorie, Bdp.ldp, all=TRUE)\n\n##\n#  Test de cohérence sur la fusion\n##\n\n# Matricules différents\nmatricules.divergents <- setdiff(levels(as.factor(Base2$Matricule)), levels(as.factor(Base1$Matricule)))\n\n# Base correspondante\nBase3 <- Base2[!as.character(Base2$Matricule) %in% levels(as.factor(Base1$Matricule)),]\n\nlibrary(plyr)\n\nBdp.ldp <- mutate(Bdp.ldp,\n       \n        montant.traitement.indiciaire = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == \"TRAITEMENT\",\"Code.rubrique\"]),\n        \n        montant.vacations = Montant*(Code %in% Code.prime[  Code.prime$Type.rémunération == \"VACATIONS\",\n                                                           \"Code.rubrique\"]),\n        \n        montant.primes.hors.vacations = Montant*(Code %in% Code.prime[ Code.prime$Type.rémunération == \"INDEMNITAIRE.OU.CONTRACTUEL\",\n                                                        \"Code.rubrique\"]),\n        \n        montant.autres.rémunérations = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == \"AUTRES\",\"Code.rubrique\"])\n       )\n\n\nAnalyse.rémunérations <- ddply(Bdp.ldp,\n                             .(Matricule, Service),\n                             summarize,\n                             traitement.indiciaire                      = sum(montant.traitement.indiciaire),\n                             vacations                                  = sum(montant.vacations),\n                             rémunération.contractuelle.ou.indemnitaire = sum(montant.primes.hors.vacations)+vacations,\n                             autres.rémunérations                       = sum(montant.autres.rémunérations),\n                             total.rémunérations                        = traitement.indiciaire \n                                                          + rémunération.contractuelle.ou.indemnitaire \n                                                          + autres.rémunérations,\n                             part.rémunération.contractuelle.ou.indemnitaire = \n                               ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,\n                                           rémunération.contractuelle.ou.indemnitaire /\n                                              (traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))\n\nattach(Analyse.rémunérations, warn.conflicts=FALSE)\n\n##\n#  Fonctionnaires (repérés par traitement indemnitaire > 0) : fonctionnaires stagiaires inclus (à vérif.)\n##\n\nhist(part.rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 & part.rémunération.contractuelle.ou.indemnitaire >0],\n   xlab=\"Pourcentage des indemnités dans la rémunération\\n hors politique familiale, indemnités journalières et remboursements\",\n   ylab=\"Effectif\",\n   main=\"Distribution de la part indemnitaire\\n de la rémunération annuelle des fonctionnaires\",\n   xlim=c(0,60),     \n   col=\"blue\",\n   breaks=50\n     )\n\n\nhist(total.rémunérations[traitement.indiciaire > 0 ]/1000,\n   xlab=\"Distribution de la rémunération en k€\\n hors politique familiale, indemnités journalières et remboursements\",\n   ylab=\"Effectif\",\n   xlim=c(0, 120),\n   main=\"Rémunération annuelle totale des fonctionnaires\",\n   col=\"blue\",\n   breaks=100\n)\n\nhist(rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 ]/1000,\n     xlab=\"Distribution des attributions indemnitaires en k€\\n hors politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 70),\n     main=\"Rémunération indemnitaire annuelle des fonctionnaires\",\n     col=\"blue\",\n     breaks=100\n)\n\nhist(vacations[vacations > 0]/1000,\n     xlab=\"en k€\",\n     ylab=\"Effectif\",\n     main=\"Rémunération des vacations\",\n     col=\"green\",\n     breaks=100\n)\n\n# La moyenne est tirée vers le haut par les outlyers\n\nStats.fonctionnaires <- summary(Analyse.rémunérations[traitement.indiciaire > 0, c(\"traitement.indiciaire\", \"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\", \"total.rémunérations\", \"part.rémunération.contractuelle.ou.indemnitaire\")])\n\nmasse.indemnitaire            <- sum(rémunération.contractuelle.ou.indemnitaire[ traitement.indiciaire > 0])\nmasse.indiciaire              <- sum(traitement.indiciaire)\nmasse.rémunérations.brutes    <- sum(total.rémunérations)\nratio.global.masse.indemnitaire  <- masse.indemnitaire/(masse.indiciaire+masse.indemnitaire)*100\n\nprint(data.frame(masse.indemnitaire, masse.indiciaire, masse.rémunérations.brutes, ratio.global.masse.indemnitaire))\n\nprint(Stats.fonctionnaires)\n\n##\n#  Contractuels (repérés par traitement indemnitaire == 0) : vacataires et stagiaires incluse\n##\n\nhist(total.rémunérations[traitement.indiciaire == 0 & total.rémunérations > 1000]/1000,\n   xlab=\"Distribution de la rémunération en k€ (supérieure à 1000 €)\\n hors politique familiale, indemnités journalières et remboursements\",\n   ylab=\"Effectif\",\n   xlim=c(0, 40),\n   main=\"Rémunération annuelle totale des contractuels\",\n   col=\"red\",\n   breaks=40\n)\n\nhist(autres.rémunérations[autres.rémunérations >0],\n     xlab=\"Distribution des autres rémunérations annuelles en € :\\n politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 5000),\n     main=\"Autres rémunérations\",\n     col=\"grey\",\n     breaks=40\n)\n\n\nStats.contractuels <- summary(Analyse.rémunérations[traitement.indiciaire == 0, c(\"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\", \"total.rémunérations\")])\n\nprint(Stats.contractuels)\n\ndetach(Analyse.rémunérations)\n\n\n##\n#  Tests réglementaires\n##\n\nattach(Bdp.ldp, warn.conflicts=FALSE)\n\n# NBI pour non titulaires\n\nNBI.aux.non.titulaires <- Bdp.ldp[ ! Statut %in% c(\"TITULAIRE\",\"STAGIAIRE\") & as.character(Code) %in% codes.NBI, c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Mois\", \"Montant\")]\n\nnombre.de.ldp.NBI.nontit <- nrow(NBI.aux.non.titulaires)\n\n# heures sup >= 25h/mois\n\nHS.sup.25 <- with(Bdp, Bdp[Heures.Sup. >= 25 , c(\"Matricule\", \"Statut\", \"Mois\", \"Heures.Sup.\", \"Brut\")])\n\nnombre.de.ldp.HS.sup.25 <- nrow(HS.sup.25)\n\n# Prime de fonctions informatiques : pas dans la base de VLB\n# on cherche la chaine de char. \"INFO\" dans les libellés de primes\n\n# variante : filtre <- regexpr(\".*(INFO|PFI|P.F.I).*\", toupper(Bdp.ldp$Libellé)) et regmatches(Bdp.ldp$Libellé, filtre)\n\nfiltre<-grep(\".*(INFO|PFI|P.F.I).*\", Libellé)\n\npersonnels.prime.informatique <- Bdp.ldp[ filtre, c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Montant\")]\n\nprimes.informatiques.potentielles<-unique(Libellé[filtre])\n  \nnombre.de.ldp.personnels.pfi <- nrow(personnels.prime.informatique)\n\n# Vacations et statut de fonctionnaire\n\nfonctionnaires.et.vacations <- Bdp.ldp[ Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\") & Code %in% Code.prime[Code.prime$Type.rémunération == \"VACATIONS\",\"Code.rubrique\"], c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Montant\")]\n\nnombre.de.ldp.fonctionnaires.et.vacations <- nrow(fonctionnaires.et.vacations)\n\n# Vacations et régime indemnitaire\n\nmatricules.RI.et.vacations <- unique(Bdp.ldp[ ! Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\") & Code %in% Code.prime[Code.prime$Type.rémunération == \"VACATIONS\",\"Code.rubrique\"], \"Matricule\"])\n\nvacations.concernées <- Bdp.ldp[Matricule %in% matricules.RI.et.vacations &  Code %in% Code.prime[Code.prime$Type.rémunération == \"VACATIONS\",\"Code.rubrique\"], c(\"Matricule\", \"Code\", \"Libellé\", \"Montant\")]\n\nRI.et.vacations <- Bdp.ldp[ Matricule %in% matricules.RI.et.vacations & Code %in% Code.prime[Code.prime$Type.rémunération == \"INDEMNITAIRE.OU.CONTRACTUEL\",\"Code.rubrique\"], c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Montant\")]\n\n# Vacations et indiciaire\n\ntraitement.et.vacations <- Bdp.ldp[ Matricule %in% matricules.RI.et.vacations & Code %in% Code.prime[Code.prime$Type.rémunération == \"TRAITEMENT\",\"Code.rubrique\"], c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Montant\")]\n\nnombre.de.ldp.RI.et.vacations <- nrow(RI.et.vacations)\nnombre.de.ldp.traitement.et.vacations <- nrow(traitement.et.vacations)\n\n# Incomptabilités de primes entre elles\n\n#IAT et IFTS\n\nfiltre.iat<-grep(\".*(IAT|I.A.T|.*Adm.*Tech).*\", Libellé, ignore.case=TRUE)\nfiltre.ifts<-grep(\".*(IFTS|I.F.T.S|.*FORF.*TRAV.*SUPP).*\", Libellé, ignore.case=TRUE)\ncodes.ifts <- unique(Bdp.ldp[filtre.ifts, \"Code\"])\n\nlength(personnels.iat.ifts <- intersect(as.character(Bdp.ldp[ filtre.iat, c(\"Matricule\")]), as.character(Bdp.ldp[ filtre.ifts, c(\"Matricule\")])))\n\n#IFTS et IB >= 380 (IM >= 350)\n\ndf1 <- Bdp.ldp[ Indice < 350, c(\"Matricule\")]\ndf1 <- df1[!duplicated(df1)]\n\ndf2 <- Bdp.ldp[ filtre.ifts, c(\"Matricule\")]\ndf2 <- df2[!duplicated(df2)]\n\ndf3 <- intersect(df1,df2)\nBdp.ldp[Matricule %in% df3 & Code %in% codes.ifts & (Indice < 380 ), c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Indice\", \"Montant\")]\n\nrm(df1, df2, df3)\n# IFTS et non tit\n\nifts.et.non.tit <- Bdp.ldp[Code %in% codes.ifts & !Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Indice\", \"Montant\")]\n\npretty.print(nombre.de.ldp.NBI.nontit)\npretty.print(nombre.de.ldp.HS.sup.25)\npretty.print(primes.informatiques.potentielles)\npretty.print(nombre.de.ldp.personnels.pfi)\npretty.print(nombre.de.ldp.fonctionnaires.et.vacations)\npretty.print(nombre.de.ldp.RI.et.vacations)\npretty.print(nombre.de.ldp.traitement.et.vacations)\n\ndetach(Bdp.ldp)\n\n\n## ------------------------------------------------------------------------------------------------------------------\n#  Sauvegardes : enlever les commentaires en mode opérationnel\n##\n\n# sauv.base(Analyse.rémunérations, \"analyse.rémunérations.csv\")\n# sauv.base(Stats.contractuels, \"stats.contractuels.csv\")\n# sauv.base(Stats.fonctionnaires, \"stats.fonctionnaires.csv\")\n# sauv.base(Bdp.ldp, \"bdp.ldp.csv\")\n# sauv.base(Base1, \"base1.csv\")\n# sauv.base(Base2, \"base2.csv\")\n# sauv.base(Base3, \"base3.csv\")\n# sauv.base(matricules.divergents, \"matricules.divergents.csv\")\n# sauv.base(data.frame(masse.indemnitaire, masse.indiciaire, masse.rémunérations.brutes, ratio.global.masse.indemnitaire),\"stats.masse.csv\" )\n# sauv.base(NBI.aux.non.titulaires, \"NBI.aux.non.titulaires.csv\")\n# sauv.base(HS.sup.25, \"HS.sup.25.csv\")\n# sauv.base(personnels.prime.informatique, \"personnels.prime.informatique.csv\")\n\nsauv.base(traitement.et.vacations)\nsauv.base(RI.et.vacations)\nsauv.base(vacations.concernées)\nsauv.base(ifts.et.non.tit)\n",
    "created" : 1395308281588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2327898547",
    "id" : "353B4DD0",
    "lastKnownWriteTime" : 1395666226,
    "path" : "C:/Documents and Settings/fnicol/Bureau/Informatique/VLB/test.25.2.2014.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}