{
    "contents" : "library(compiler)\nenableJIT(3)\n\n# générer.codes\n# chemin.dossier\n# début.période.sous.revue\n# fin.période.sous.revue\n# champ.détection.1\n# champ.détection.2\n# étiquette.matricule\n# étiquette.montant\n# étiquette.totalgeneral\n# seuil.troncature\n# date.format\n# nbi\n# nom.de.fichier.de.paie\n# matricule.categorie\n# code.prime\n# matricule.avantage\n\n##---------------------------------------------------------------------------------------------------------------------\n#  Chemins et variables globales du programme\n##\n\n# Cette section pourra être modifiée en entrée dans d'autres contextes\n# Matricule, Codes, Avantages en nature\n\ngénérer.codes <- TRUE\nchemin.dossier <- \"G:/Equipe NICOL/2013/SIERG/GESTION/2-Travail/OBSERVATIONS/ANALYSES/RH\"\nmatricule.categorie <- \"LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv\"     \ncode.prime          <- \"LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv\"\n#matricule.avantage  <- \"LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv\"\n\ndébut.période.sous.revue <- 2008\nfin.période.sous.revue   <- 2013\nétiquette.matricule <- \"Matricule\"\nétiquette.totalgeneral <- \"TOTAL GENERAL\"\nétiquette.montant <- \"Net.a.Payer\"\nseuil.troncature <- 99\nnbi <- \"paies-NBI-1\"\n\n# Le format est jour/mois/année avec deux chiffres-séparateur-deux chiffres-séparateur-4 chiffres.\n#Le séparateur peut être changé en un autre en modifiant le \"/\" dans fate.format\n\ndate.format <- \"%d/%m/%Y\"\n\nnom.de.fichier.de.paie <- \"paies-Bulletins de paye-1\"\n\nchamp.détection.1<-étiquette.matricule\nchamp.détection.2<-\"Matricule\"\n\n# Lignes de paie\n# On peut lire jusqu'à 10 fichiers csv qui seront générés au format\n#  \"chemin dossier + paies-Bulletins de paye-j.csv\"\n\nldp <- paste0(nom.de.fichier.de.paie,début.période.sous.revue:fin.période.sous.revue,\".csv\")\nldp <- paste0(\"paies-Lignes de paye-\",1:10,\".csv\")\n\n# Bulletins de paie\n\nbdp <- paste0(nom.de.fichier.de.paie, \".csv\")\n\ncolonnes.sélectionnées <- c(\"Matricule\", \"Statut\", \"Code\", \"Mois\", \"Libellé\", \"Montant\")\n\n##---------------------------------------------------------------------------------------------------------------------\n\noptions(width=120, warn=-1)\n\nsource(file.path(chemin.dossier, \"bibliothèque.fonctions.paie.R\"), encoding=\"UTF-8\")\n\n# Programme principal\n\n##\n#  Bases\n##\n\n# Lignes de paie\n\nldp <- ldp[file.exists(chemin(ldp))]\nnbi <- nbi[file.exists(chemin(nbi))]\nbdp <- bdp[file.exists(chemin(bdp))]\n\nLdp <- Read.csv(ldp)\ncodes.NBI <- Read.csv(nbi)\n\n\n#SETDIFFLDP <- setdiff(Ldp, Ldp1)\n\n# Equivaut à :\n# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)\n# ...\n# ldp <- rbind(ldp1,ldp2,...)\n\n# Bulletin de paie\n\nBdp <- read.csv.skip(bdp)\n\n#Matricule.categorie <- read.csv.skip(matricule.categorie)\nCode.prime          <- read.csv.skip(code.prime)\n#Matricule.avantage  <- read.csv.skip(matricule.avantage)\n\n#suppression des colonnes Nom Prénom redondantes\n\n#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.categorie) \nBdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)\n\n#fusion matricule | avantage | catégorie par Matricule\n\nBdp.ldp <- merge(Bdp, Ldp)\n\n#génération du fichier des codes et libellés en privilégiant le Code\n\nif (générer.codes == TRUE) \n{\n  Codes.NT  <- Bdp.ldp[ ! Bdp.ldp$Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), c(\"Code\", \"Libellé\")]\n  Codes.NT <- Codes[!duplicated(Codes.NT),]\n  Codes.fonct  <- Bdp.ldp[ Bdp.ldp$Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), c(\"Code\", \"Libellé\")]\n  Codes.fonct  <- Codes[!duplicated(Codes.fonct),]\n  Codes <- rbind(Code.NT, Codes.fonct)\n  \n  Codes.NBI <- NBI[ ,\"NBI\"]  \n  Codes.NBI <- Codes.NBI[!duplicated(Codes.NBI),]\n  \n  sauv.base(Codes.NT)\n  sauv.base(Codes.fonct)\n  sauv.base(Codes)\n  \n  q(\"no\", 0, FALSE)\n}\n\n\n#Bdp.ldp<-merge(Bdp.ldp, Matricule.categorie, by=c(\"Nom\"), all=TRUE)\n\n# Matricule.categorie <- selectionner.cle.matricule(Matricule.categorie, Bdp.ldp)\n# \n# # Fusion étroite\n# Base1 <- merge(Matricule.categorie, Bdp.ldp)\n# \n# # Fusion  large\n# Base2 <- merge(Matricule.categorie, Bdp.ldp, all=TRUE)\n\n##\n#  Test de cohérence sur la fusion\n##\n# \n# # Matricules différents\n# matricules.divergents <- setdiff(levels(as.factor(Base2$Matricule)), levels(as.factor(Base1$Matricule)))\n# \n# # Base correspondante\n# Base3 <- Base2[!as.character(Base2$Matricule) %in% levels(as.factor(Base1$Matricule)),]\n\nest.code.de.type <- function(x) Bdp.ldp$Code %in% Code.prime[Code.prime$Type.rémunération == x, \"Code\"]\n\nlibrary(plyr)\n\nBdp.ldp <- mutate(Bdp.ldp,\n                  \n                  montant.traitement.indiciaire = Montant*(est.code.de.type(\"TRAITEMENT\")),\n                  montant.primes = Montant*(est.code.de.type(\"INDEMNITAIRE.OU.CONTRACTUEL\")),\n                  montant.autres.rémunérations = Montant*(est.code.de.type(\"AUTRES\")))\n\n\nAnalyse.rémunérations <- ddply(Bdp.ldp,\n                               .(Matricule, Service),\n                               summarize,\n                               #                             catégorie = Code.catégorie[1],\n                               traitement.indiciaire                      = sum(montant.traitement.indiciaire),\n                               rémunération.contractuelle.ou.indemnitaire = sum(montant.primes),\n                               autres.rémunérations                       = sum(montant.autres.rémunérations),\n                               total.rémunérations                        = traitement.indiciaire \n                               + rémunération.contractuelle.ou.indemnitaire \n                               + autres.rémunérations,\n                               part.rémunération.contractuelle.ou.indemnitaire = \n                                 ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,\n                                        rémunération.contractuelle.ou.indemnitaire /\n                                          (traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))\n\nattach(Analyse.rémunérations, warn.conflicts=FALSE)\n\n##\n#  Stats globales\n##\n\nStats <- summary(Analyse.rémunérations[total.rémunérations > 0, c(\"traitement.indiciaire\", \"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\", \"total.rémunérations\", \"part.rémunération.contractuelle.ou.indemnitaire\")])\n\nmasse.indemnitaire            <- sum(rémunération.contractuelle.ou.indemnitaire[ total.rémunérations > 0])\nmasse.indiciaire              <- sum(traitement.indiciaire[ total.rémunérations > 0])\nmasse.rémunérations.brutes    <- sum(total.rémunérations[ total.rémunérations > 0])\n\nprint(data.frame(masse.indemnitaire, masse.indiciaire, masse.rémunérations.brutes))\n\ncat(\"masse totale rémunérations brutes hors élus : \", rem.brute.hors.élus <- sum(Bdp[Bdp$Service != \"Elus\",]$Brut), \"\\n\")\ncat(\"masse totale rémunérations brutes élus      : \", rem.brute.élus      <- sum(Bdp[Bdp$Service == \"Elus\",]$Brut), \"\\n\")\ncat(\"masse totale rémunérations brutes           : \", rem.brute           <- rem.brute.élus + rem.brute.hors.élus, \"\\n\")\n\ncat(\"masse salariale brutes : \", sum(Bdp.ldp$Montant), \"\\n\")\nprint(Stats)\n\n\n# Stats.C <- summary(Analyse.rémunérations[total.rémunérations > 0 & catégorie == \"C\", c(\"traitement.indiciaire\", \"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\", \"total.rémunérations\", \"part.rémunération.contractuelle.ou.indemnitaire\")])\n# \n# masse.indemnitaire.C            <- sum(rémunération.contractuelle.ou.indemnitaire[ total.rémunérations > 0 & catégorie == \"C\" & ! is.na(rémunération.contractuelle.ou.indemnitaire) & ! is.na(catégorie)])\n# masse.indiciaire.C              <- sum(traitement.indiciaire[ total.rémunérations > 0 & catégorie == \"C\" & ! is.na(traitement.indiciaire) & ! is.na(catégorie)])\n# masse.rémunérations.brutes.C    <- sum(total.rémunérations[ total.rémunérations > 0 & catégorie == \"C\" & ! is.na(total.rémunérations) & ! is.na(catégorie)])\n# \n# print(data.frame(masse.indemnitaire.C, masse.indiciaire.C, masse.rémunérations.brutes.C))\n# \n# print(Stats.C)\n\n\n\n##\n#  Fonctionnaires (repérés par traitement indemnitaire > 0) : fonctionnaires stagiaires inclus (à vérif.)\n##\n\npar(las=1,\n    lab=c(15,5,6))\n\nmesure <- part.rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 & part.rémunération.contractuelle.ou.indemnitaire >0]\n\nhist(mesure,\n     xlab=\"Pourcentage des indemnités dans la rémunération\\n hors politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     main=\"Distribution de la part indemnitaire\\n de la rémunération annuelle des fonctionnaires\",\n     #xlim=c(min(mesure),max(mesure)+3),     \n     col=\"blue\",\n     nclass=50\n)\n\n\n\nhist(total.rémunérations[traitement.indiciaire > 0 ]/1000,\n     xlab=\"Distribution de la rémunération en k€\\n hors politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 125),\n     main=\"Rémunération annuelle totale des fonctionnaires\",\n     col=\"blue\",\n     nclass=50\n)\n\nhist(rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 ]/1000,\n     xlab=\"Distribution des attributions indemnitaires en k€\\n hors politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 45),\n     main=\"Rémunération indemnitaire annuelle des fonctionnaires\",\n     col=\"blue\",\n     breaks=50\n)\n\n# La moyenne est tirée vers le haut par les outlyers\n\nStats.fonctionnaires <- summary(Analyse.rémunérations[traitement.indiciaire > 0, c(\"traitement.indiciaire\", \"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\", \"total.rémunérations\", \"part.rémunération.contractuelle.ou.indemnitaire\")])\n\nmasse.indemnitaire            <- sum(rémunération.contractuelle.ou.indemnitaire[ traitement.indiciaire > 0])\nmasse.indiciaire              <- sum(traitement.indiciaire)\nmasse.rémunérations.brutes    <- sum(total.rémunérations)\nratio.global.masse.indemnitaire  <- masse.indemnitaire/(masse.indiciaire+masse.indemnitaire)*100\n\nprint(data.frame(masse.indemnitaire, masse.indiciaire, masse.rémunérations.brutes, ratio.global.masse.indemnitaire))\n\nprint(Stats.fonctionnaires)\n\n##\n#  Contractuels (repérés par traitement indemnitaire == 0) : vacataires et stagiaires incluse\n##\n\nhist(total.rémunérations[traitement.indiciaire == 0 ]/1000,\n     xlab=\"Distribution de la rémunération en k€\",\n     ylab=\"Effectif\",\n     xlim=c(0, 4),\n     main=\"Rémunération annuelle totale des contractuels,\\n étudiants stagiaires et vacataires\",\n     col=\"red\",\n     breaks=40\n)\n\nhist(autres.rémunérations[autres.rémunérations >0],\n     xlab=\"Distribution des autres rémunérations annuelles en € :\\n politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 5000),\n     main=\"Autres rémunérations\",\n     col=\"grey\",\n     breaks=50\n)\n\n\nStats.contractuels <- summary(Analyse.rémunérations[traitement.indiciaire == 0, c(\"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\", \"total.rémunérations\")])\n\nprint(Stats.contractuels)\n\ndetach(Analyse.rémunérations)\n\n##\n#  Tests réglementaires\n##\n\nattach(Bdp.ldp, warn.conflicts=FALSE)\n\n# Tests du type : incompatibilités entre indemnités et statut\n\n# NBI pour non titulaires\n\nNBI.aux.non.titulaires <- Bdp.ldp[ ! Statut %in% c(\"TITULAIRE\",\"STAGIAIRE\") & as.character(Code) %in% codes.NBI, colonnes.sélectionnées]\n\nnombre.de.ldp.NBI.nontit <- nrow(NBI.aux.non.titulaires)\n\n# heures sup >= 25h/mois\n\nHS.sup.25 <- with(Bdp, Bdp[Heures.Sup. >= 25 , c(\"Matricule\", \"Statut\", \"Mois\", \"Heures.Sup.\", \"Brut\")])\n\nnombre.de.ldp.HS.sup.25 <- nrow(HS.sup.25)\n\n# Prime de fonctions informatiques : pas dans la base de VLB\n# on cherche la chaine de char. \"INFO\" dans les libellés de primes\n# variante : filtre <- regexpr(\".*(INFO|PFI|P.F.I).*\", toupper(Bdp.ldp$Libellé)) et regmatches(Bdp.ldp$Libellé, filtre)\n\nfiltre<-grep(\".*(INFO|PFI|P.F.I).*\", Libellé, ignore.case=TRUE)\n\npersonnels.prime.informatique <- Bdp.ldp[ filtre, colonnes.sélectionnées]\n\nprimes.informatiques.potentielles<-unique(Libellé[filtre])\n\nnombre.de.ldp.personnels.pfi <- nrow(personnels.prime.informatique)\n\n# Vacations et statut de fonctionnaire\n\nldp.fonctionnaires.et.vacations <- Bdp.ldp[ Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\") & est.code.de.type(\"VACATIONS\"), colonnes.sélectionnées]\n\nnombre.de.ldp.fonctionnaires.et.vacations <- nrow(ldp.fonctionnaires.et.vacations)\n\n# Vacations et régime indemnitaire\n\nBdp.ldp.vacations <- Bdp.ldp[est.code.de.type(\"VACATIONS\"), colonnes.sélectionnées]\n\nmatricules.nontit.et.vacations <- unique(Bdp.ldp.vacations[ ! Bdp.ldp.vacations$Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), \"Matricule\"])\n\nvacations.concernées <- Bdp.ldp.vacations[Matricule %in% matricules.nontit.et.vacations, ]\n\nRI.et.vacations <- Bdp.ldp[ Matricule %in% matricules.nontit.et.vacations & est.code.de.type(\"INDEMNITAIRE.OU.CONTRACTUEL\"), colonnes.sélectionnées]\n\ntraitement.et.vacations <- Bdp.ldp[ Matricule %in% matricules.nontit.et.vacations & est.code.de.type(\"TRAITEMENT\"), colonnes.sélectionnées]\n\nnombre.de.ldp.RI.et.vacations <- nrow(RI.et.vacations)\nnombre.de.ldp.traitement.et.vacations <- nrow(traitement.et.vacations)\n\n#IFTS et IB >= 380 (IM >= 350)\n\nfiltre.iat<-grep(\".*(IAT|I.A.T|.*Adm.*Tech).*\", Libellé, ignore.case=TRUE)\nfiltre.ifts<-grep(\".*(IFTS|I.F.T.S|.*FORF.*TRAV.*SUPP).*\", Libellé, ignore.case=TRUE)\ncodes.ifts <- unique(Bdp.ldp[filtre.ifts, \"Code\"])\n\nsélection.matricules <- intersect(!duplicated(Bdp.ldp[ Indice < 350, c(\"Matricule\")]), !duplicated( Bdp.ldp[ filtre.ifts, c(\"Matricule\")]))\n\nBdp.ldp[Matricule %in% sélection.matricules & Code %in% codes.ifts & (Indice < 350 ), colonnes.sélectionnées]\n\nrm(sélection.matricules)\n\n# IFTS et non tit\n\nifts.et.non.tit <- Bdp.ldp[Code %in% codes.ifts & !Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), colonnes.sélectionnées]\n\n# Incomptabilités de primes entre elles\n\n#IAT et IFTS\n\npersonnels.iat.ifts <- intersect(as.character(Bdp.ldp[ filtre.iat, c(\"Matricule\")]), as.character(Bdp.ldp[ filtre.ifts, c(\"Matricule\")]))\n\nnb.personnels.iat.ifts <- length(personnels.iat.ifts)\n\n# Primes entre elles : \n\npretty.print(nombre.de.ldp.NBI.nontit)\npretty.print(nombre.de.ldp.HS.sup.25)\npretty.print(primes.informatiques.potentielles)\npretty.print(nombre.de.ldp.personnels.pfi)\npretty.print(nombre.de.ldp.fonctionnaires.et.vacations)\npretty.print(nombre.de.ldp.RI.et.vacations)\npretty.print(nombre.de.ldp.traitement.et.vacations)\npretty.print(nb.personnels.iat.ifts)\n\ndetach(Bdp.ldp)\n\n## ------------------------------------------------------------------------------------------------------------------\n#  Sauvegardes : enlever les commentaires en mode opérationnel\n##\n# \n# sauv.base(list(Analyse.rémunérations,\n# Stats.contractuels,\n# Stats.fonctionnaires,\n# Bdp.ldp,\n# #sauv.base(Base1)\n# # sauv.base(Base2, \"base2.csv\")\n# # sauv.base(Base3, \"base3.csv\")\n# # sauv.base(matricules.divergents, \"matricules.divergents.csv\")\n# # sauv.base(data.frame(masse.indemnitaire, masse.indiciaire, masse.rémunérations.brutes, ratio.global.masse.indemnitaire),\"stats.masse.csv\" )\n#  NBI.aux.non.titulaires,\n# # sauv.base(HS.sup.25, \"HS.sup.25.csv\")\n# # sauv.base(personnels.prime.informatique, \"personnels.prime.informatique.csv\")\n# ldp.fonctionnaires.et.vacations,\n# matricules.nontit.et.vacations,\n# Bdp.ldp.vacations))\n\n##---------------------------------------------------------------------------------------------------------------------\n#  Analyse des variations\n##\n##---------------------------------------------------------------------------------------------------------------------\n#options(width=120, warn=-1)\n\n\njulian.date.début.période <- julian(as.Date(paste0(\"01/01/\", début.période.sous.revue), date.format))\njulian.exercice.suivant.premier <- julian(as.Date(paste0(\"01/01/\",(début.période.sous.revue+1)), date.format))\njulian.date.fin.période   <- julian(as.Date(paste0(\"01/01/\", fin.période.sous.revue+1), date.format))\njulian.exercice.dernier <- julian(as.Date(paste0(\"01/01/\",fin.période.sous.revue), date.format))\n\n\nnames(Total) <- c(début.période.sous.revue:fin.période.sous.revue)\n\nplot(names(Total),Total,\n     ylab=\"k€\",\n     las=1,\n     xlab=\"Année\",\n     main=\"Rémunération annuelle nette des agents\",\n     col=\"red\",\n     type=\"b\",  \n     xlim=c(début.période.sous.revue,fin.période.sous.revue)\n)\n\nLdp$Matricule<-as.numeric(Ldp$Matricule)\n\nLdp<-Ldp[order(Ldp$Matricule),]\n\nlibrary(plyr)\n\ncalcul.nb.jours <- function(entrée, sortie) \n{\n  \n  julian.entrée <- \n    ifelse(entrée == \"\", \n           julian.date.début.période,\n           max(julian.date.début.période, julian(as.Date(entrée, date.format))))\n  \n  julian.sortie <- \n    ifelse(sortie == \"\", \n           julian.date.fin.période, \n           min(julian.date.fin.période, julian(as.Date(sortie, date.format))))\n  \n  return (julian.sortie - julian.entrée)\n}\n\ncalcul.nb.jours.dans.exercice.in <- function(entrée) \n{\n  date.entrée <- as.Date(entrée, date.format)\n  \n  if (entrée == \"\")\n  {\n    julian.entrée <-  julian.date.début.période\n    julian.fin.exercice <- julian.exercice.suivant.premier\n  }\n  else\n  {\n    julian.entrée <- julian(date.entrée)\n    if (julian.date.début.période < julian.entrée)\n      julian.fin.exercice <- julian(as.Date(paste0(\"01/01/\",as.integer(substr(entrée, 7, 10))+1), date.format))\n    else\n    {\n      julian.fin.exercice <- julian.exercice.suivant.premier\n      julian.entrée <- julian.date.début.période\n    }\n  }\n  \n  return (julian.fin.exercice - julian.entrée)\n  \n}\n\ncalcul.nb.jours.dans.exercice.out <- function(sortie) \n{\n  date.sortie <- as.Date(sortie, date.format)\n  \n  if (sortie == \"\")\n  {\n    julian.sortie <-  julian.date.fin.période\n    julian.début.exercice <- julian.exercice.dernier\n  }\n  else\n  {\n    julian.sortie <- julian(date.sortie)\n    if (julian.date.début.période < julian.sortie)\n      julian.début.exercice <- julian(as.Date(paste0(\"01/01/\",as.integer(substr(sortie, 7, 10))), date.format))\n    else\n    {\n      julian.début.exercice <- julian.date.début.période\n      julian.sortie <- julian.exercice.suivant.premier\n    }\n  }\n  \n  return (julian.sortie - julian.début.exercice)\n  \n}\n\ncalcul.variation <- function(rémunération.début, rémunération.sortie, nb.jours.exercice.début, nb.jours.exercice.sortie, nb.exercices)\n{\n  if (nb.exercices > 1)  \n    \n    return(( rémunération.sortie / rémunération.début   - 1  ) * 100)\n  \n  else\n    \n    return (0)\n  \n}\n\nAnalyse.rémunérations <- ddply(Ldp,\n                               .(Matricule),\n                               summarize,\n                               nb.exercices = length(Net.a.Payer),\n                               entrée = Date.d.entrée[1],\n                               sortie = Date.de.Sortie[nb.exercices],\n                               nb.jours = calcul.nb.jours(entrée, sortie),\n                               nb.jours.exercice.début = calcul.nb.jours.dans.exercice.in(entrée),\n                               nb.jours.exercice.sortie = calcul.nb.jours.dans.exercice.out(sortie),\n                               rémunération.début = Net.a.Payer[1]/nb.jours.exercice.début*365,\n                               rémunération.sortie = Net.a.Payer[nb.exercices]/nb.jours.exercice.sortie*365,\n                               moyenne.rémunération.annuelle.sur.période = sum(Net.a.Payer)*365/nb.jours,\n                               variation.rémunération.jour = calcul.variation(rémunération.début, rémunération.sortie, nb.jours.exercice.début, nb.jours.exercice.sortie, nb.exercices),\n                               variation.moyenne.rémunération.jour = \n                                 ( ( 1 + variation.rémunération.jour / 100 ) ^ (365 / nb.jours) - 1) * 100\n)\n\nAnalyse.rémunérations <- mutate(Analyse.rémunérations,\n                                plus.de.2.ans = (nb.jours >= 2*365),\n                                moins.de.2.ans = (nb.jours < 2*365),\n                                moins.de.1.an  = (nb.jours < 365),\n                                moins.de.six.mois = (nb.jours < 365/2))\n\nattach(Analyse.rémunérations, warn.conflicts=FALSE)\n\nnlevels(as.factor(Matricule))\n\nsummary(Analyse.rémunérations[ c(\"plus.de.2.ans\",\n                                 \"moins.de.2.ans\",\n                                 \"moins.de.1.an\", \n                                 \"moins.de.six.mois\")])\n\n\n\nhist(moyenne.rémunération.annuelle.sur.période/1000,\n     xlab=paste0(\"Distribution de la rémunération nette moyenne sur la période \",début.période.sous.revue,\"-\",fin.période.sous.revue,\" en k€\"),\n     ylab=\"Effectif\",\n     xlim=c(0, 80),\n     main=\"Rémunération nette moyenne\",\n     col=\"blue\",\n     nclass=100)\n\n\ntable(moins.de.2.ans, cut(variation.moyenne.rémunération.jour, breaks=seq(-5,5,by=0.5)))\n\nAnalyse.rémunérations.filtrée<-Analyse.rémunérations[ nb.jours.exercice.début > seuil.troncature & nb.jours.exercice.sortie > seuil.troncature & nb.exercices > 1, ]\n\nStats.Analyse.rémunérations.filtrée<-summary(Analyse.rémunérations.filtrée[-c(1:4)])\n\nprint(Stats.Analyse.rémunérations.filtrée)\n\nAnalyse.rémunérations.personnels.plus.de.2.ans <- Analyse.rémunérations.filtrée[Analyse.rémunérations.filtrée$plus.de.2.ans,]\n\nStats.Analyse.rémunérations.personnels.plus.de.2.ans<-summary(Analyse.rémunérations.personnels.plus.de.2.ans[-c(1:4)])\n\nprint(Stats.Analyse.rémunérations.personnels.plus.de.2.ans)\n\n\nAnalyse.rémunérations.personnels.moins.de.2.ans <- Analyse.rémunérations[moins.de.2.ans,]\n\nStats.Analyse.rémunérations.personnels.moins.de.2.ans<-summary(Analyse.rémunérations.personnels.moins.de.2.ans)\n\nprint(Stats.Analyse.rémunérations.personnels.moins.de.2.ans)\n\ntable(Analyse.rémunérations.filtrée$plus.de.2.ans, cut(Analyse.rémunérations.filtrée$variation.moyenne.rémunération.jour, breaks=seq(-10,35,by=0.5)))\n\nhist(Analyse.rémunérations.personnels.plus.de.2.ans$variation.moyenne.rémunération.jour,\n     xlab =\"Variation annuelle moyenne de la rémunération en %\",\n     las=1,\n     sub  = \"pour 41 agents restés plus de deux ans\",\n     ylab =\"Effectifs\",\n     main =\"Distribution de la variation annuelle\\nmoyenne de la rémunération des agents en place\",\n     col =\"red\",\n     nclass=100\n)\n\n\nhist(Analyse.rémunérations.personnels.moins.de.2.ans$variation.moyenne.rémunération.jour,\n     xlab =\"Variation annuelle moyenne de la rémunération en %\",\n     xlim=c(-10,30),\n     las=1,\n     sub  = \"pour 30 agents restés moins de deux ans\",\n     ylab =\"Effectifs\",\n     main =\"Distribution de la variation annuelle\\nmoyenne de la rémunération des agents restés moins de deux ans\",\n     col =\"red\",\n     nclass=100\n)\n\ndetach(Analyse.rémunérations)\n\nLdp <- mutate(Ldp,\n              plus.de.2.ans = Matricule\n              %in%\n                Analyse.rémunérations[Analyse.rémunérations$plus.de.2.ans, étiquette.matricule])\nattach(Ldp, warn=-1)\n\nLdp.plus.de.2.ans<-Ldp[plus.de.2.ans, ]\n\nplot(levels(as.factor(Ldp.plus.de.2.ans$Année)),\n     tapply(Ldp.plus.de.2.ans$Net.a.Payer, Ldp.plus.de.2.ans$Année, sum)/1000,\n     ylab=\"k€\",\n     las=1,\n     xlab=\"Année\",\n     main=\"Rémunération annuelle nette des agents\\nrestés plus de deux ans\",\n     col=\"red\",\n     type=\"b\",  \n     xlim=c(début.période.sous.revue,fin.période.sous.revue)\n)\n\n\nLdp.moins.de.2.ans<-Ldp[!plus.de.2.ans, ]\n\nplot(levels(as.factor(Ldp.moins.de.2.ans$Année)),\n     tapply(Ldp.moins.de.2.ans$Net.a.Payer, Ldp.moins.de.2.ans$Année, sum)/1000,\n     ylab=\"k€\",\n     las=1,\n     xlab=\"Année\",\n     main=\"Rémunération annuelle nette des agents\\n restés moins de deux ans\",\n     col=\"blue\",\n     type=\"b\",  \n     xlim=c(début.période.sous.revue,fin.période.sous.revue)\n)\n\nplot(levels(as.factor(Ldp.moins.de.2.ans$Année)),\n     sapply(levels(as.factor(Ldp.moins.de.2.ans$Année)) ,function(x) nlevels(as.factor(Ldp.moins.de.2.ans[Ldp.moins.de.2.ans$Année == x, ]$Matricule))),\n     ylab=\"Effectif\",\n     las=1,\n     xlab=\"Année\",\n     main=\"Nombre d'agents\\n restés moins de deux ans\",\n     col=\"blue\",\n     type=\"b\",  \n     xlim=c(début.période.sous.revue,fin.période.sous.revue)\n)\n\nplot(levels(as.factor(Ldp.plus.de.2.ans$Année)),\n     sapply(levels(as.factor(Ldp.plus.de.2.ans$Année)) ,function(x) nlevels(as.factor(Ldp.plus.de.2.ans[Ldp.plus.de.2.ans$Année == x, ]$Matricule))),\n     ylab=\"Effectif\",\n     las=1,\n     xlab=\"Année\",\n     main=\"Nombre d'agents\\n restés plus de deux ans\",\n     col=\"blue\",\n     type=\"b\",  \n     xlim=c(début.période.sous.revue,fin.période.sous.revue)\n)\n\nplot(levels(as.factor(Année)),\n     sapply(levels(as.factor(Année)), function(x) nlevels(as.factor(Ldp[Année == x, ]$Matricule))),\n     ylab=\"Effectif\",\n     las=1,\n     xlab=\"Année\",\n     main=\"Nombre d'agents rémunérés par exercice\",\n     col=\"green\",\n     type=\"b\",  \n     xlim=c(début.période.sous.revue,fin.période.sous.revue)\n)\n\ntable(plus.de.2.ans, Année)\n\ndetach(Ldp)\n\n## ------------------------------------------------------------------------------------------------------------------\n#  Sauvegardes : enlever les commentaires en mode opérationnel\n##\n\nsauv.base(Total, \"Total.csv\")\nwrite.csv2(Ldp, chemin(\"ligne.de.paie.csv\"))\n\nsauv.base(Stats.Analyse.rémunérations.personnels.plus.de.2.ans, \"Stats.Analyse.rémunérations.personnels.plus.de.2.ans.csv\")\nsauv.base(Stats.Analyse.rémunérations.personnels.moins.de.2.ans, \"Stats.Analyse.rémunérations.personnels.moins.de.2.ans.csv\")\n\nsauv.base(Analyse.rémunérations, \"Stats.Analyse.rémunérations.personnels.csv\")\nsauv.base(Analyse.rémunérations.filtrée, \"Stats.Analyse.rémunération.filtrée.csv\")\n",
    "created" : 1395671808452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4061034061",
    "id" : "17896A88",
    "lastKnownWriteTime" : 1395674771,
    "path" : "C:/Documents and Settings/fnicol/Bureau/Informatique/ALTAIR/altair.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}