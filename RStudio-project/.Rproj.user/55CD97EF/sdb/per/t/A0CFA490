{
    "collab_server" : "",
    "contents" : "# encoder ce script en windows-1252\nencodage.code.source <- \"ISO-8859-1\"\ninitwd <- getwd()\nsetOSWindows  <- Sys.info()[\"sysname\"] != \"Linux\"\n\n# On doit désactiver les sauts de page PDF ou alors filtrer les \\newpage par le hack pour produire les docx\n\nPDF <<- FALSE\n\n\nif (setOSWindows) {\n  invisible(Sys.setenv(PATH = paste0(Sys.getenv(\"PATH\"), \";\", file.path(Sys.getenv(\"R_HOME\"), \"../texlive/miktex/bin;\"))))\n  setwd(file.path(Sys.getenv(\"R_HOME\"), \"../Tests/Exemple\"))\n  source(\"syspaths.R\", encoding=encodage.code.source)\n  \n  source(\"prologue.R\", encoding=encodage.code.source)\n  \n  library(rmarkdown)\n  # ne pas écrire altaïr.pdf... \n  \n  render(\"altair.R\",\n         output_format = output_format(knitr_options(opts_chunk = list(fig.width = 7.5, \n                                                                       fig.height = 5,\n                                                                       echo = FALSE,\n                                                                       warning = FALSE,\n                                                                       message = FALSE,\n                                                                       results = 'asis')),\n                                       keep_md=TRUE, clean_supporting=FALSE,\n                                       pandoc = pandoc_options(to = \"latex\",\n                                                               from = \"markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash-implicit_figures\",\n                                                               args=c(\"-V\", \n                                                                      \"papersize=A4\",\n                                                                      \"-V\",\n                                                                      \"geometry:top=2cm,bottom=1.5cm,left=2cm,right=1.5cm\",\n                                                                      \"--highlight-style\",\n                                                                      \"tango\",\n                                                                      \"--template\",\n                                                                      \"../../R/library/rmarkdown/rmd/latex/default.tex\") )),\n         output_file = \"altair.pdf\")\n\n  file.rename(\"altair.pdf\", \"altaïr.pdf\")\n  \n  shell(\"start acrord32.exe altaïr.pdf\")\n  \n  ## début de hack ## \n  \n  # Hack relativement laid mais très efficace qui évite de refaire tourner render pour la fabrication d'un .md\n  # en recalculant les mêmes choses afin de produire le nouveau format.\n  # On utilise le .md produit par keep_md = TRUE plus haut et les images conservées grâce à clean_supporting = FALSE\n  # Mais il faut réinsérer un nouveau YAML header pour effacer les noms, dates etc. standard\n  # et aussi effacer un FALSE indésirable produit par render en tête de .md (qui correspond au traitement du premier YAML header du pdf)\n  # Les autres alternatives ont été essayées et échouent. La production directe de .md par render échoue sur la question\n  # des liens URL comportant un caractère non-ascii.\n  \n  # attention encodage UTF-8 obligatoire quelle que soit la plateforme\n  \n  con <- file(\"altair.2.md\", open = \"a\", encoding = \"UTF-8\")\n  \n  writeLines(text = \"\\n---\\ntitle: false\\nauthor: false\\ndate: false\\n---\\n\", con)     \n  \n  writeLines(readLines(\"altair.md\", encoding = \"UTF-8\")[-c(1, 2)], con)\n  \n  close(con)\n  file.rename(\"altair.2.md\", \"altair.md\")\n  \n  # A réévaluer en fonction de l'évolution de la bibliothèque rmarkdown et de pandoc\n  \n  ## fin de hack ##\n  \n  system(\n    paste(\n      file.path(Sys.getenv(\"R_HOME\"), \"../RStudio/bin/pandoc/pandoc.exe\"),\n      \"altair.md +RTS -K512m -RTS --to docx --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash-implicit_figures --output altaïr.docx --highlight-style tango\"\n    )\n  )\n\n  shell(\"start winword altaïr.docx\")\n  \n  if (! keep_md) {\n    unlink(\"altair.ansi_pdf\", recursive=TRUE)\n    unlink(\"altair.md\")\n  }\n\n} else {\n  setwd(\"Tests/Exemple\")\n  source(\"syspaths.R\", encoding = encodage.code.source)\n  library(knitr)\n  opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, results = 'asis')\n  source(\"prologue.R\", encoding = encodage.code.source)\n  writeLines(iconv(readLines(\"altair.R\"), from = encodage.code.source, to = \"UTF-8\"),\n             \"altair.utf8.R\")\n  \n  library(rmarkdown)\n  #spin(\"altair.utf8.R\", knit=FALSE)\n  rmarkdown::knitr_options_html(fig_width=8, fig_height=4, fig_retina=6, keep_md=FALSE)\n  rmarkdown::knitr_options_pdf(fig_width=8, fig_height=4, fig_crop=TRUE)\n  \n  rmarkdown::render(\"altair.utf8.R\", clean = FALSE,  \"html_document\")\n  \n  system(paste(\"/usr/bin/pandoc\",\n                \"altair.utf8.html  +RTS -K512m -RTS --to odt --from  html --output altaïr.odt --highlight-style tango\"))\n  \n  system(paste(\"/usr/local/bin/wkhtmltopdf\", \n               \"--page-size A4 --quiet altair.utf8.html altaïr.pdf\")) \n  \n  system(\"/usr/bin/lowriter altaïr.odt\")\n\n  system(\"/usr/bin/okular altaïr.pdf\")\n  unlink(\"altair.utf8_files\", recursive = TRUE)  \n}\n\n\nsetwd(initwd)\n",
    "created" : 1455391457818.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "120216372",
    "id" : "A0CFA490",
    "lastKnownWriteTime" : 1455496305,
    "last_content_update" : 1455496305278,
    "path" : "C:/Users/Public/Dev/altair/Tests/Exemple/rapport_msword_et_pdf.R",
    "project_path" : "Tests/Exemple/rapport_msword_et_pdf.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}