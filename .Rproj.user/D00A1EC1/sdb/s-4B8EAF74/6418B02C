{
    "contents" : "#'---\n#'title: \"RH Sierg\"\n#'author: \"Fabrice Nicol\"\n#'date: false\n#'output:\n#'html_document:\n#'css: style.css\n#'---\n\n\n\n#+ echo=FALSE\nexercice <- 2012\n\n\n#'Exercice `r exercice`  \n#'`r format(Sys.Date(), \"%a %d %b %Y\")`  \n\n#+ echo=FALSE\n\nlibrary(compiler)\nlibrary(knitr)\n\noptions(warn=-1, verbose=FALSE, OutDec=\",\")\ncompilerOptions <- setCompilerOptions(suppressAll=TRUE)\nJITlevel <- enableJIT(3)\n\n#/*---------------------------------------------------------------------------------------------------------------------\n#  Chemins et variables globales du programme\n##\n\n# Cette section pourra être modifiée en entrée dans d'autres contextes\n# Matricule, Codes, Avantages en nature */\n\nchemin.dossier <- \"~/Dev/altair2/Reports/Sierg\"\nchamp.détection.1 <- \"Matricule\"\nchamp.détection.2 <- \"Code\"\nchamp.détection.élus <- \"Service\"\nchamp.nir <- \"Nir\"\nlibellé.élus <- \"Elus\"\n\nmatricule.catégorie <- \"LISTES DES PERSONNES REMUNEREES EN 2012 PAR CATEGORIE ET STATUT.csv\"     \ncode.prime          <- \"LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv\"\nmatricule.avantage  <- \"LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv\"\ncode.traitement <- 1010\n\n#/* Lignes de paie\n# On peut lire jusqu'à 10 fichiers csv qui seront générés au format\n#  \"chemin dossier + paies-Bulletins de paye-j.csv\" */\n\nldp <- paste0(paste0(exercice,\"-Lignes de paye-\"),1:10,\".csv\")\n\n#/* Bulletins de paie */\n\nbdp <- paste0(exercice, \"-Bulletins de paye-1.csv\")\n\ncodes.NBI <- c(\"1012\", \"101B\", \"101M\", \"4652\", \"4672\")\n\nsource(file.path(chemin.dossier, \"bibliothèque.fonctions.paie.R\"), encoding=\"UTF-8-BOM\")\n\n#/* Programme principal\n##\n#  Bases\n##\n# Lignes de paie  */\n\nldp <- ldp[file.exists(chemin(ldp))]\n\nLdp<-Read.csv(ldp)\n\n#/* Equivaut à :\n# ldp1 <- read.csv2(chemin.ldp1,  blank.lines.skip=TRUE, skip=1)\n# ...\n# ldp <- rbind(ldp1,ldp2,...)\n# Bulletin de paie  */\n\nBdp <- read.csv.skip(bdp)\n\n#Matricule.catégorie <- read.csv.skip(matricule.catégorie)\nCode.prime          <- read.csv.skip(code.prime)\n#Matricule.avantage  <- read.csv.skip(matricule.avantage)\n\n#suppression des colonnes Nom Prénom redondantes\n\n#Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.catégorie) \nBdp                 <- selectionner.cle.matricule.mois(Bdp, Ldp)\n\nif (!setequal(intersect(names(Ldp), names(Bdp)), c(\"Mois\", \"Matricule\")))\n  stop(\"L'appariement ne peut se faire par les clés Matricule et Mois\")\n\n\nliste.matricules.fonctionnaires <- unique(Bdp[Bdp$Mois == 12 & Bdp$Statut %in% c(\"TITULAIRE\", \"STAGIAIRE\"), \"Matricule\"])\nliste.matricules.élus   <- unique(Bdp[Bdp$Mois == 12 &  Bdp[champ.détection.élus] == libellé.élus, \"Matricule\"])\n\nBdp.nir.total.hors.élus <- Bdp[Bdp$Mois == 12 & ! Bdp$Matricule %in% liste.matricules.élus, champ.nir]\n\nBdp.nir.fonctionnaires  <- Bdp[Bdp$Mois == 12 &   Bdp$Matricule %in% liste.matricules.fonctionnaires, champ.nir]\n\nannées.fonctionnaires   <- exercice-1-(as.numeric(substr(as.character(Bdp.nir.fonctionnaires), 2, 3)) + 1900)\n\nannées.total.hors.élus  <- exercice-1-(as.numeric(substr(as.character(Bdp.nir.total.hors.élus), 2, 3)) + 1900)\n\n#'# 1. Statistiques de population\n#'**Ensemble des personnels non élus**  \n#+ echo=FALSE, fig.retina=2\n\nhist(années.total.hors.élus,\n     xlab=\"Âge\",\n     xlim=c(18, 75),\n     ylab=\"Effectif\",\n     main=\"Pyramide des âges\",\n     col=\"blue\",\n     nclass=50)\n\n#'\n#+ echo=FALSE, results='asis'\n\nRésumé(années.total.hors.élus, \"Âge des personnels\", align='c')\n\n#'Effectif total: `r length(années.total.hors.élus)`  \n#'\n#'**Ensemble des fonctionnaires stagiaires et titulaires**  \n\n#'  \n#+ echo=FALSE, fig.retina=2\n\nhist(années.fonctionnaires,\n     xlab=\"Âge\",\n     xlim=c(18,68),\n     ylab=\"Effectif\",\n     main=\"Pyramide des âges des fonctionnaires\",\n     col=\"navy\",\n     nclass=50)\n\n#'\n#+ echo=FALSE, results='asis'\n\nRésumé(années.fonctionnaires, \"Âge des fonctionnaires\", align='c')\n\n#'   \n#'Effectif total: `r length(années.fonctionnaires)`   \n#'  \n#'**Nota :** Dans les statistiques de cette section, les élus ne sont pas pris en compte.\n#'Pyramides au 31 décembre `r exercice`  \n#+ echo=FALSE\n\n#fusion matricule | avantage | catégorie par Matricule\n\nBdp.ldp <- merge(Bdp, Ldp)\n\nlibrary(plyr)\n\nBdp.ldp2 <- mutate(Bdp.ldp,\n       \n        montant.traitement.indiciaire = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == \"TRAITEMENT\",\"Code.rubrique\"]),\n        montant.primes = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == \"INDEMNITAIRE.OU.CONTRACTUEL\",\"Code.rubrique\"]),\n        montant.autres.rémunérations = Montant*(Code %in% Code.prime[Code.prime$Type.rémunération == \"AUTRES\",\"Code.rubrique\"]),\n        warn=-1\n       )\n\n\nAnalyse.rémunérations <- ddply(Bdp.ldp2,\n                             c(\"Matricule\", \"Service\"),\n                             summarize,\n                             traitement.indiciaire = sum(montant.traitement.indiciaire),\n                             rémunération.contractuelle.ou.indemnitaire = sum(montant.primes),\n                             autres.rémunérations                       = sum(montant.autres.rémunérations),\n                             total.rémunérations                        = traitement.indiciaire \n                                                          + rémunération.contractuelle.ou.indemnitaire \n                                                          + autres.rémunérations,\n                             part.rémunération.contractuelle.ou.indemnitaire = \n                               ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,\n                                           rémunération.contractuelle.ou.indemnitaire /\n                                              (traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))\n\nattach(Analyse.rémunérations, warn.conflicts=FALSE)\n\n#'# 2. Rémunérations \n#'## 2.1 Fonctionnaires titulaires et stagiaires\n#+ echo=FALSE, fig.retina=2, fig.width=7.1\n\nhist(total.rémunérations[traitement.indiciaire > 0 ]/1000,\n   xlab=\"Distribution de la rémunération en k€ \\n hors politique familiale, indemnités journalières et remboursements\",\n   ylab=\"Effectif\",\n   xlim=c(0, 120),\n   main=\"Rémunération annuelle des fonctionnaires\",\n   col=\"blue\",\n   nclass=50\n)\n\n#'  \n#+ echo=FALSE, fig.retina=2, fig.width=7.1\n\nhist(rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 ]/1000,\n     xlab=\"Distribution des attributions indemnitaires en k€\\n hors politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 70),\n     main=\"Rémunération indemnitaire annuelle\\ndes fonctionnaires\",\n     col=\"blue\",\n     nclass=50\n)\n\n#'    \n#+ echo=FALSE, fig.retina=2, fig.width=7.1\n\nhist(part.rémunération.contractuelle.ou.indemnitaire[traitement.indiciaire > 0 & part.rémunération.contractuelle.ou.indemnitaire >0],\n     xlab=\"Pourcentage des indemnités dans la rémunération\\n hors politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     main=\"Distribution de la part indemnitaire\\n de la rémunération annuelle des fonctionnaires\",\n     xlim=c(0,60),     \n     col=\"blue\",\n     nclass=30\n)\n\n#/* La moyenne est tirée vers le haut par les outlyers */\n\n\nmasse.indemnitaire            <- sum(rémunération.contractuelle.ou.indemnitaire[ traitement.indiciaire > 0])\nmasse.indiciaire              <- sum(traitement.indiciaire)\nmasse.rémunérations.brutes    <- sum(total.rémunérations)\nratio.global.masse.indemnitaire  <- masse.indemnitaire/(masse.indiciaire+masse.indemnitaire)*100\n\n#'### Masses indemnitaires\n#'Les résultats sont exprimés en euros.\n#+ echo=FALSE, results='asis'\n\n Tableau(c(\"Masse indiciaire\", \"Masse indemnitaire\"),\n                  masse.indiciaire, masse.indemnitaire)\n  \n#'  \n#+ echo=FALSE, results='asis'\n\n Tableau(c(\"Masse des rémunérations brutes\", \"Part de la masse indemnitaire\"),\n                   masse.rémunérations.brutes, ratio.global.masse.indemnitaire)\n\n\n#'### Statistiques de position\n#+ echo=FALSE, results='asis'\n\n#/*print(xtable(Stats.fonctionnaires), type=\"html\", include.rownames=FALSE)*/\n\n Résumé(Analyse.rémunérations[traitement.indiciaire > 0, \n                              c(\"traitement.indiciaire\",\n                                \"rémunération.contractuelle.ou.indemnitaire\",\n                                \"autres.rémunérations\") ],\n                               c(\"Traitement indiciaire\",\n                                 \"Rémunération contractuelle ou indemnitaire\",\n                                 \"Autres rémunérations\"))\n\n#'\n#+ echo=FALSE, results='asis'\n\n Résumé(Analyse.rémunérations[traitement.indiciaire > 0, \n                              c( \"total.rémunérations\",\n                                 \"part.rémunération.contractuelle.ou.indemnitaire\") ],\n                              c(\"Total rémunérations\",\n                                \"Part de la rémunération contractuelle ou indemnitaire\"))\n\n\n#'## 2.2 Contractuels, vacataires et stagiaires inclus\n#+ echo=FALSE, fig.retina=2, fig.width=7.1\n\nhist(total.rémunérations[traitement.indiciaire == 0 & total.rémunérations > 1000]/1000,\n   xlab=\"Distribution de la rémunération en k€ (supérieure à 1000 €)\\n hors politique familiale, indemnités journalières et remboursements\",\n   ylab=\"Effectif\",\n   xlim=c(0, 40),\n   main=\"Rémunération annuelle totale des contractuels\",\n   col=\"red\")\n\n#'\n#+ echo=FALSE, fig.retina=2, fig.width=7.1\n\nhist(autres.rémunérations[autres.rémunérations >0],\n     xlab=\"Distribution des autres rémunérations annuelles en € :\\n politique familiale, indemnités journalières et remboursements\",\n     ylab=\"Effectif\",\n     xlim=c(0, 5000),\n     main=\"Autres rémunérations\",\n     col=\"grey\")\n\n#'### Statistiques de position\n#+ echo=FALSE, results='asis'\n\n  Résumé(Analyse.rémunérations[traitement.indiciaire == 0, \n                                                    c(\"rémunération.contractuelle.ou.indemnitaire\", \"autres.rémunérations\")],\n                               c(\"Rémunération contractuelle ou indemnitaire\",\n                                  \"Autres rémunérations\"))\n\n#'\n#+ echo=FALSE, results='asis'\n\n  Résumé(Analyse.rémunérations[traitement.indiciaire == 0, \n                                                   \"total.rémunérations\"],\n                                                   \"Total rémunérations\")\ndetach(Analyse.rémunérations)\n\n#'Les résultats sont exprimés en euros.\n#'\n#'# 3. Tests réglementaires\n#'### Contrôle des heures supplémentaires, des NBI et primes informatiques\n#'\n#+ echo=FALSE\n\nattach(Bdp.ldp, warn.conflicts=FALSE)\n\nNBI.aux.non.titulaires <- Bdp.ldp[ ! Statut %in% c(\"TITULAIRE\",\"STAGIAIRE\") & as.character(Code) %in% codes.NBI, c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Mois\", \"Montant\")]\n\nnombre.de.ldp.NBI.nontit <- nrow(NBI.aux.non.titulaires)\n\nHS.sup.25 <- Bdp.ldp[Heures.Sup. >= 25 , c(\"Matricule\", \"Statut\", \"Mois\", \"Heures.Sup.\", \"Brut\")]\n\nnombre.de.ldp.HS.sup.25 <- nrow(HS.sup.25)\n\n#/* Prime de fonctions informatiques : pas dans la base de VLB\n# on cherche la chaine de char. \"INFO\" dans les libellés de primes\n\n# variante : filtre <- regexpr(\".*(INFO|PFI|P.F.I).*\", toupper(Bdp.ldp$Libellé)) et regmatches(Bdp.ldp$Libellé, filtre)*/\n\nfiltre<-grep(\".*(INFO|PFI|P.F.I).*\", Libellé)\n\npersonnels.prime.informatique <- Bdp.ldp[ filtre, c(\"Matricule\", \"Statut\", \"Code\", \"Libellé\", \"Montant\")]\n\nprimes.informatiques.potentielles<-unique(Libellé[filtre])\n\nif  (length(primes.informatiques.potentielles) == 0) \n  primes.informatiques.potentielles <- \"aucune\"\n  \nnombre.de.personnels.pfi <- nrow(personnels.prime.informatique)\n\n\n#'Primes informatiques potentielles : `r primes.informatiques.potentielles`\n#+ echo=FALSE, results='asis'\n\nTableau(\n  c(\"Nombre de lignes NBI pour non titulaires\",\n    \"Nombre de lignes HS >= 25\",\n    \"Nombre de bénéficiaires de PFI\"),\n  nombre.de.ldp.NBI.nontit, \n  nombre.de.ldp.HS.sup.25,\n  nombre.de.personnels.pfi)\n\n#+ echo=FALSE\ndetach(Bdp.ldp)\n\n#'### Nota :\n#'NBI: nouvelle bonification indiciaire  \n#'HS: heures supplémentaires  \n#'PFI: prime de fonctions informatiques  \n\n\n#/* ------------------------------------------------------------------------------------------------------------------\n#  Sauvegardes : enlever les commentaires en mode opérationnel\n##\n\n# sauv.base(Analyse.rémunérations, \"analyse.rémunérations.csv\")\n# sauv.base(Stats.contractuels, \"stats.contractuels.csv\")\n# sauv.base(Stats.fonctionnaires, \"stats.fonctionnaires.csv\")\n# sauv.base(Bdp.ldp, \"bdp.ldp.csv\")\n# sauv.base(Base1, \"base1.csv\")\n# sauv.base(Base2, \"base2.csv\")\n# sauv.base(Base3, \"base3.csv\")\n# sauv.base(matricules.divergents, \"matricules.divergents.csv\")\n# sauv.base(data.frame(masse.indemnitaire, masse.indiciaire, masse.rémunérations.brutes, ratio.global.masse.indemnitaire),\"stats.masse.csv\" )\n# sauv.base(NBI.aux.non.titulaires)\n# sauv.base(HS.sup.25, \"HS.sup.25.csv\")\n# sauv.base(personnels.prime.informatique, \"personnels.prime.informatique.csv\") \n#sauv.base(liste.matricules.fonctionnaires)\n#sauv.base(liste.matricules.)*/\n\n",
    "created" : 1398608952432.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2392048650",
    "id" : "6418B02C",
    "lastKnownWriteTime" : 1398607137,
    "path" : "~/Dev/altair/Tests/Sierg/sierg.R",
    "project_path" : "Tests/Sierg/sierg.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}