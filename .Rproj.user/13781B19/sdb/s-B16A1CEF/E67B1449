{
    "contents" : "##\n#  Fonctions auxiliaires\n##\n\nchemin <-  function(fichier) \n  file.path(chemin.dossier, fichier)\n\nscan.prime <- function(texte, Base)\n{\n  unique(Base[grep(paste0(\".*(\", texte,\").*\"), Base$Libellé, ignore.case = TRUE), c(\"Matricule\", \"Libellé\", \"Libellé\")])\n}\n\n\n# Trouve le numéro de la ligne à laquelle se situe la liste des noms de variables\n# en recherchant soit le mot \"Matricule\" soit une expression du type \"Code...\"\n# Il faudra déduire ce \"skip\" du read.csv2 pour récupérer proprement les noms de variable\n\n# Pour cela on scanne les 25 premières lignes de la table une première fois\n\n\ntrouver.valeur.skip <-  function(chemin.table, encodage) \n  max(\n    sapply(\n      read.csv2(chemin.table, nrows = 25, fileEncoding = encodage),\n      function(x) \n      {\n        m <- match(champ.détection.1, x, nomatch = 0 ) \n        if (m == 0)\n          m <- pmatch(champ.détection.2, x, nomatch = 0, duplicates.ok = FALSE ) \n        return(m)\n      }\n    ))\n\n\nselectionner.cle.matricule <-  function(Base1, Base2) \n  subset(Base1, \n         select = c(champ.détection.1, setdiff(names(Base1),names(Base2))))\n\nselectionner.cle.matricule.mois <-  function(Base1, Base2) \n  subset(Base1, \n         select = c(champ.détection.1,\"Mois\",\"Année\",\n                  setdiff(names(Base1),names(Base2))))\n\nread.csv.skip <- function(x, encodage = encodage.entrée) \n{\n  chem <- chemin(x)\n  T <- read.csv2(chem, skip = trouver.valeur.skip(chem, encodage), fileEncoding = encodage)\n  if (encodage.entrée != \"UTF-8\")\n     names(T) <- iconv(names(T), to=\"UTF-8\")\n  return(T)\n}\n\nSauv.base <- function(chemin.dossier, nom, nom.sauv, encodage = encodage.entrée)\n{\n  message(\"Sauvegarde de \", nom)\n  write.csv2(get(nom), paste0(chemin.dossier, \"/\", iconv(nom.sauv, to = encodage.entrée), \".csv\"), \n             row.names = FALSE, fileEncoding = encodage)\n  \n}\n \nsauv.bases <- function(dossier, ...) \n{\n  chemin.dossier <- chemin(dossier)\n  \n  if (!see_if(is.dir(chemin.dossier)))\n  {\n    stop(\"Pas de dossier de travail spécifié\")\n  }\n  \n  tmp <- as.list(match.call()) \n  tmp[1] <- NULL\n \n  message(\"Dans le dossier \", chemin.dossier,\" :\")\n  invisible(lapply(tmp[-1], function(x) Sauv.base(chemin.dossier, ic(x), x)))\n}\n\n# Utiliser une assignation globale \n# car la fonction anonyme ne comporte que de variables locales\n\nRead.csv <- function(vect.chemin)   do.call(rbind, lapply(vect.chemin, read.csv.skip))\n\npretty.print <- function(x) cat(gsub(\".\", \" \",deparse(substitute(x)), fixed = TRUE), \"   \", x,\"\\n\")\n\nest.code.de.type <- function(x, Base) Base$Code %in% Code.prime[Code.prime$Type.rémunération == x, \"Code\"]\n\nRésumé <- function(x,y, align = 'r',...) \n              {\n                 S <- cbind(c(\"Minimum\", \"1er quartile\", \"Médiane\", \"Moyenne\", \"3ème quartile\", \"Maximum\"), \n                            prettyNum(sub(\"[M13].*:\", \"\", summary(y, ...)), big.mark = \" \"))\n                 \n                 dimnames(S)[[2]] <- c(\"Statistique\", x)\n                 \n                 kable(S, row.names = FALSE, align = align)\n                 \n               }\nTableau <- function(x, ...)\n{\n  V <- c(...)\n  if (\"sep.milliers\" %in% names(V))\n  {\n    sep.milliers <- V[\"sep.milliers\"]\n    V$sep.milliers <- NULL\n  }  else\n  sep.milliers <- \" \"\n  \n  T <- t(prettyNum(V, big.mark = sep.milliers))\n  T <- as.data.frame(T)\n  names(T) <- x\n  kable(T, row.names = FALSE, align = \"c\")\n}\n\nTableau.vertical <- function(colnames, rownames, f)\n{\n  T <- data.frame(rownames,   sapply(rownames, f))\n  \n  names(T) <- colnames\n  \n  kable(T, row.names = FALSE, align = \"c\")\n}\n\n\n  julian.date.début.période <- julian(as.Date(paste0(\"01/01/\", début.période.sous.revue), date.format))\n  julian.exercice.suivant.premier <- julian(as.Date(paste0(\"01/01/\",(début.période.sous.revue+1)), date.format))\n  julian.date.fin.période   <- julian(as.Date(paste0(\"01/01/\", fin.période.sous.revue+1), date.format))\n  julian.exercice.dernier <- julian(as.Date(paste0(\"01/01/\",fin.période.sous.revue), date.format))\n\ncalcul.nb.jours <- function(entrée, sortie) \n{\n  \n  julian.entrée <- \n    ifelse(entrée == \"\", \n           julian.date.début.période,\n           max(julian.date.début.période, julian(as.Date(entrée, date.format))))\n  \n  julian.sortie <- \n    ifelse(sortie == \"\", \n           julian.date.fin.période, \n           min(julian.date.fin.période, julian(as.Date(sortie, date.format))))\n  \n  return (julian.sortie - julian.entrée)\n}\n\ncalcul.nb.jours.mois <- function(mois.entrée, mois.sortie, année)\n{\n  if (mois.sortie < mois.entrée) return(0);\n  \n  if (mois.sortie == 12) \n  {\n     année.sortie <- année +1\n     mois.sortie = 1\n  }\n  else\n  {\n    année.sortie <- année\n    mois.sortie <- mois.sortie + 1\n  }\n  \n   as.numeric(as.Date(paste0(\"01\", \n                                  formatC(mois.sortie, width = 2, flag = \"0\"),\n                                  année.sortie),\n                      \"%d%m%Y\")\n              - as.Date(paste0(\"01\",\n                                   formatC(mois.entrée, width = 2, flag = \"0\"),\n                                   année),\n                            \"%d%m%Y\"))\n}\n\ncalcul.nb.jours.dans.exercice.in <- function(entrée) \n{\n  date.entrée <- as.Date(entrée, date.format)\n  \n  if (entrée == \"\")\n  {\n    julian.entrée <-  julian.date.début.période\n    julian.fin.exercice <- julian.exercice.suivant.premier\n  }\n  else\n  {\n    julian.entrée <- julian(date.entrée)\n    if (julian.date.début.période < julian.entrée)\n      julian.fin.exercice <- julian(as.Date(paste0(\"01/01/\",as.integer(substr(entrée, 7, 10))+1), date.format))\n    else\n    {\n      julian.fin.exercice <- julian.exercice.suivant.premier\n      julian.entrée <- julian.date.début.période\n    }\n  }\n  \n  return (julian.fin.exercice - julian.entrée)\n  \n}\n\ncalcul.nb.jours.dans.exercice.out <- function(sortie) \n{\n  date.sortie <- as.Date(sortie, date.format)\n  \n  if (sortie == \"\")\n  {\n    julian.sortie <-  julian.date.fin.période\n    julian.début.exercice <- julian.exercice.dernier\n  }\n  else\n  {\n    julian.sortie <- julian(date.sortie)\n    if (julian.date.début.période < julian.sortie)\n      julian.début.exercice <- julian(as.Date(paste0(\"01/01/\",as.integer(substr(sortie, 7, 10))), date.format))\n    else\n    {\n      julian.début.exercice <- julian.date.début.période\n      julian.sortie <- julian.exercice.suivant.premier\n    }\n  }\n  \n  return (julian.sortie - julian.début.exercice)\n  \n}\n\ncalcul.variation <- function(rémunération.début, rémunération.sortie, nb.jours.exercice.début, nb.jours.exercice.sortie, nb.exercices)\n{\n  if (nb.exercices > 1)  \n    \n    return(ifelse(rémunération.début == 0, 0, ( rémunération.sortie / rémunération.début   - 1  ) * 100))\n  \n  else\n    \n    return (0)\n  \n}\n\npositive <- function(X) X[ X > 0]\n\n\ninstaller.paquet <- function(paquet, rigoureusement = FALSE) \n{\n  if (missing(paquet))  return(NA_character_)\n  Paquet <- deparse(paquet)\n  if (length(find.package(Paquet, quiet = TRUE)) == 0)\n  {\n    install.packages(Paquet)\n    if (length(find.package(Paquet, quiet = TRUE)) !=0 )\n    {\n      message(Paquet, \" a été installé.\")\n      return(invisible(1))\n    }\n    else\n    {\n      message(Paquet, \" n'a pas été installé.\")\n      if (rigoureusement == TRUE) \n      {\n        message(\"Arrêt: le paquet \", Paquet, \" n'a pas pu être installé.\")\n        stop(\"Fin\")\n      }\n      return(invisible(0))\n    }\n  }\n  else\n    message(Paquet, \" est déjà installé.\")\n  return(invisible(0))\n}\n\ninstaller.paquets <- function(..., rigoureusement = FALSE) \n{\n  tmp <- as.list(match.call()) \n  tmp[1] <- NULL\n  if (!missing(rigoureusement)) tmp[length(tmp)] <- NULL\n  if (length(tmp) == 0) return(0)\n  \n  invisible(do.call(sum, lapply(tmp, function(x) installer.paquet(x, rigoureusement))))\n}\n\n\n\n",
    "created" : 1399646853220.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2851451781",
    "id" : "E67B1449",
    "lastKnownWriteTime" : 1399646841,
    "path" : "C:/Users/fnicol/Dev/altair/Tests/Exemple/bibliotheque.fonctions.paie.R",
    "project_path" : "Tests/Exemple/bibliotheque.fonctions.paie.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}