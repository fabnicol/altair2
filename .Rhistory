& ! Code %in% Codes.paiement.traitement
& ! is.na(Libellé)
& ! is.na(Code)
& ! grepl(".*SMIC.*",
Libellé, ignore.case = TRUE)
& as.numeric(substr(Code,1,2)) < 50
& grepl(expression.rég.heures.sup,
Libellé, ignore.case = TRUE),
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant")]
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% Bulletins.paie.Lignes.paie
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% names(Bulletins.paie.Lignes.paie)
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% colnames(Bulletins.paie.Lignes.paie)
v <- c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% colnames(Bulletins.paie.Lignes.paie)
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant")[v]
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant")[!v]
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
Bulletins.paie[Bulletins.paie$Matricule == "1500 F", c("Matricule", "Brut"]
Bulletins.paie[Bulletins.paie$Matricule == "1500 F", c("Matricule", "Brut")]
vect <- c("1017 F", "1061 D", "1068 L", "1071 P", "1080 Z", "1081 A", "1086 F", "1100 W", "1107 D", "1112 J", "1172 Z", "1180 H", "1201 F", "1202 G", "123 J", "1239 X", "1245 D", "1253 M", "1267 C", "1318 H", "1355 Y", "1385 F", "1413 L", "1445 W", "1470 Y", "1500 F", "1501 G", "1502 H", "1503 J", "1560 W", "1602 S", "1617 H", "1619 K", "1622 N", "1623 P", "1637 E", "1638 F", "1641 J", "1642 K", "165 E", "165 E", "1652 W", "1666 L", "1703 B", "1723 Y", "1732 H", "1784 P", "1786 S", "1787 T", "1788 U", "1798 E", "1814 X", "1815 Y", "185 B", "199 S", "201 U", "202 V", "203 W", "204 X", "207 A", "208 B", "209 C", "211 E", "213 G", "214 H", "215 J", "217 L", "219 N", "220 P", "223 T", "224 U", "226 W", "227 X", "230 A", "234 0", "234 E", "248 V", "249 W", "250 X", "305 G", "306 H", "307 J", "308 K", "312 P","314 S, "317 V", "348 D", "353 J", "373 F", "377 K", "38 S", "385 U", "385 U", "426 N", "429 S", "437 A", "451 R","48 C","504 Y","547 V","553 B","74 F","760 B","811 G","820 S","832 E","840 N","904 H","925 F","932 N","98 G")
vect <- c("1017 F", "1061 D", "1068 L", "1071 P", "1080 Z", "1081 A", "1086 F", "1100 W", "1107 D", "1112 J", "1172 Z", "1180 H", "1201 F", "1202 G", "123 J", "1239 X", "1245 D", "1253 M", "1267 C", "1318 H", "1355 Y", "1385 F", "1413 L", "1445 W", "1470 Y", "1500 F", "1501 G", "1502 H", "1503 J", "1560 W", "1602 S", "1617 H", "1619 K", "1622 N", "1623 P", "1637 E", "1638 F", "1641 J", "1642 K", "165 E", "165 E", "1652 W", "1666 L", "1703 B", "1723 Y", "1732 H", "1784 P", "1786 S", "1787 T", "1788 U", "1798 E", "1814 X", "1815 Y", "185 B", "199 S", "201 U", "202 V", "203 W", "204 X", "207 A", "208 B", "209 C", "211 E", "213 G", "214 H", "215 J", "217 L", "219 N", "220 P", "223 T", "224 U", "226 W", "227 X", "230 A", "234 0", "234 E", "248 V", "249 W", "250 X", "305 G", "306 H", "307 J", "308 K", "312 P","314 S", "317 V", "348 D", "353 J", "373 F", "377 K", "38 S", "385 U", "385 U", "426 N", "429 S", "437 A", "451 R","48 C","504 Y","547 V","553 B","74 F","760 B","811 G","820 S","832 E","840 N","904 H","925 F","932 N","98 G")
vect
Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Matricule != 0, c("Matricule", "Brut")]
Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Matricule == 0, c("Matricule", "Brut")]
Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, c("Matricule", "Brut")]
agregate(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Brut"], Matricule, FUN=nrow)
aggregate(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Brut"], Matricule, FUN=nrow)
aggregate(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Brut"], Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Matricule"], FUN=nrow)
aggregate(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Brut"], by=Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ]$Matricule, FUN=nrow)
help(agregate)
help(aggregate)
aggregate(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Brut"], by=list(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ]$Matricule), FUN=nrow)
aggregate(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, "Brut"], by=list(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ]$Matricule), FUN=sum)
ddply(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ], .(Matricule), nrow)
ddply(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ], .(Matricule), nrow=nrow)
ddply(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ], .(Matricule), N = nrow)
ddply(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ], .(Matricule), nrow)
D <- ddply(Bulletins.paie[Bulletins.paie$Matricule %in% vect & Bulletins.paie$Brut == 0, ], .(Matricule), nrow)
sauv.bases(chemin.dossier.bases, "D")
read.csv2("C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/Bases")
read.csv2("C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/Bases/Diff.csv")
D2 <- read.csv2("C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/Bases/Diff.csv")
D
merge(D, D2)
merge(D2, D)
M <- merge(D2, D, all=TRUE)
M
M$Prob <- 0
M
M$Prob <- ifelse(is.na(V1), Diff, Diff - V1)
M$Prob <- ifelse(is.na(M$V1), M$Diff, M$Diff - M$V1)
M
M[M$Prob != 0]
M[[M$Prob != 0]]
M[M$Prob != 0, ]
sauv.bases(chemin.dossier.bases, "Prob")
sauv.bases(chemin.dossier.bases, "M")
Bulletins.paie[Bulletins.paie$Matricule == "932 N", "Brut"]
Bulletins.paie[Bulletins.paie$Matricule == "932 N", "Mois"]
length(Bulletins.paie[Bulletins.paie$Matricule == "932 N", "Mois"])
Bulletins.paie[Bulletins.paie$Matricule == "932 N", c("Année", "Mois", "Brut")]
nrow(Bulletins.paie[Bulletins.paie$Matricule == "932 N", c("Année", "Mois", "Brut")])
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == "932 N", c("Année", "Mois", "Brut")]
unique(Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == "932 N", c("Année", "Mois", "Brut")])
nrow(unique(Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == "932 N", c("Année", "Mois", "Brut")]))
BL <- nrow(unique(Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == "932 N", c("Année", "Mois", "Brut")]))
B <- Bulletins.paie[Bulletins.paie$Matricule == "932 N", c("Année", "Mois", "Brut")]
merge(B, BL)
B
BL
BL <- unique(Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == "932 N", c("Année", "Mois", "Brut")])
merge(B, BL)
merge(B, BL, all=TRUE)
merge(B, BL, all.x=TRUE)
merge(B, BL, all.y=TRUE)
merge(B, BL, all, by.x=c("Année", "Mois"))
merge(B, BL, all, by.x="Année")
merge(B, BL, by.x="Année")
merge(B, BL, by.x="Mois")
class(B$Année)
class(BL$Année)
class(BL$Mois)
class(B$Mois)
type(B$Mois)
mode(B$Mois)
mode(BL$Mois)
mode(BL$Année)
mode(B$Année)
nrow(B)
nrow(BL)
nrow(merge(B, BL))
nrow(merge(B, BL, all=TRUE))
names(B$Brut) <- "Brut.B"
names(BL$Brut) <- "Brut.BL"
nrow(merge(B, BL, all=TRUE))
merge(B, BL, all=TRUE)
B
names(BL)[3] <- "Brut.BL"
BL
names(B)[3] <- "Brut.B"
merge(B, BL, all=TRUE)
B.merged <- merge(B, BL, all=TRUE)
B.merged$Diff <- B.merged$Brut.B - B.merged$Burt.BL
B.merged$Brut.B - B.merged$Burt.BL
B.merged$Brut.B
B.merged$Burt.BL
B.merged$Diff <- B.merged$Brut.B - B.merged$Brut.BL
B.merged
B.merged[B.merged$Diff != 0]
B.merged[B.merged$Diff != 0,]
B.merged[is.na(B.merged$Diff),]
B
Lignes.paie[Lignes.paie$Matricule == "932 N" & Lignes.paie$Année == 2011 & Lignes.paie$Mois == 4, c("Code", Montant")]
""
Lignes.paie[Lignes.paie$Matricule == "932 N" & Lignes.paie$Année == 2011 & Lignes.paie$Mois == 4, c("Code", "Montant")]
Lignes.paie[Lignes.paie$Matricule == "932 N" & Lignes.paie$Année == 2011 & Lignes.paie$Mois == 4, ]
Lignes.paie[Lignes.paie$Matricule == "932 N" & Lignes.paie$Année == 2011 & Lignes.paie$Mois == 5, ]
Lignes.paie[Lignes.paie$Matricule == "932 N" & Lignes.paie$Année == 2011 & Lignes.paie$Mois == 3, ]
Lignes.paie[Lignes.paie$Matricule == "932 N" & Lignes.paie$Année == 2011 & Lignes.paie$Mois == 2, ]
#'---
#'title: false
#'author: false
#'date: false
#'output:
#'html_document:
#'css: style.css
#'---
#'<p class = "centered"><img src = "Altair.bmp" /></p>
#'<p class = "title">RH Exemple</p>
#'
#+ echo = FALSE, warning = TRUE, message = FALSE
# comportement global du programme
# Lorsque l'on n'a que une ou deux années, mettre étudier.variations à FALSE
# Lorsque l'on n'étudie pas une base Xémélios, mettre étudier.tests.statutaires à FALSE
library(compiler)
options(warn = -1, verbose = FALSE, OutDec = ",")
encodage.entrée <- "ISO-8859-1"
# dans cet ordre
try(setwd("Tests/Exemple"), silent = TRUE)
source("prologue.R", encoding = encodage.entrée)
compilerOptions <- setCompilerOptions(suppressAll = TRUE)
JITlevel        <- enableJIT(2)
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"), encoding = encodage.entrée)
installer.paquets(knitr, plyr, ggplot2, assertthat, yaml)
library(knitr)
library(plyr)
library(ggplot2)
library(assertthat)
# problème temporaire avec l'option fig.retina depuis fin mai 2014
knitr::opts_chunk$set(fig.width = 7.5, echo = FALSE, warning = FALSE, message = FALSE, results = 'asis')
dir.create(chemin.dossier.bases, recursive = TRUE)
#'<p class = "centered"><b>Exercices `r paste(début.période.sous.revue, "à", fin.période.sous.revue)` </b></p>
#'<p class = "author">Fabrice Nicol</h1>
#'
#+ echo = FALSE
#'`r format(Sys.Date(), "%a %d %b %Y")`
#'
nombre.exercices <- fin.période.sous.revue - début.période.sous.revue + 1
# Le format est jour/mois/année avec deux chiffres-séparateur-deux chiffres-séparateur-4 chiffres.
# Le séparateur peut être changé en un autre en modifiant le "/" dans date.format
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes
# Contrôle de cohérence
#  on vérifie que chaque code de paie est associé, dans le fichier des codes de paiement (par défaut, racinecodes.csv),
#  que à chaque code donné on a associé un et un seul type de rémunération ("INDEMNITAIRE", "TRAITEMENT", etc.)
if (file.exists(chemin(nom.fichier.codes.paiement)))
{
Codes.paiement <- read.csv.skip(nom.fichier.codes.paiement)
if (nlevels(as.factor(Codes.paiement$Code)) != nrow(unique(Codes.paiement[ , c(étiquette.code, "Type.rémunération")])))
{
message("Davantage de types de rémunérations que de codes distincts : incohérence de la base de codes.")
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
print(unique(merge(data.frame(Code = names(V),
"Nombre de types de rémunérations distincts" = V,
row.names=NULL),
Codes.paiement[Codes.paiement$Code %in% names(V),
c(étiquette.code, "Type.rémunération")],
by = étiquette.code,
all=TRUE)))
stop("Vérifier le fichier " %+% nom.fichier.codes.paiement)
}
message("Chargement des codes de paiement.")
}
fichier.personnels.existe <- file.exists(chemin(nom.fichier.personnels))
if (fichier.personnels.existe)
{
base.personnels.catégorie <- read.csv.skip(nom.fichier.personnels)
message("Chargement du fichier des catégories statutaires des personnels.")
}
# Lignes de paie
# On peut lire jusqu'à 50 fichiers csv de lignes de paie qui seront générés au format :
# "chemin dossier + racine-Lignes de paye-j.csv" où racine est un bref identifiant du type de contrôle (exemple : "c2a-", "PEV-", ...)
lignes.paie <- nom.fichier.paie %+% "-" %+% 1:50 %+% ".csv"
lignes.paie <- lignes.paie[file.exists(chemin(lignes.paie))]
# Bulletins de paie
# On peut lire jusqu'à 10 fichiers csv de bulletins de paie qui seront générés au format :
# "chemin dossier + racine-Bulletins de paye-j.csv"
bulletins.paie <- nom.bulletin.paie %+% "-" %+% 1:10 %+% ".csv"
bulletins.paie <- bulletins.paie[file.exists(chemin(bulletins.paie))]
# Programme principal
# Bases
# Lignes de paie
# On ne retient que les bases ayant pour années au minimum début.période.sous.revue
# et au maximum fin.période.sous.revue, qui contiennent toutes les colonnes requises
# pour le contrôle
Read.csv("Lignes.paie", lignes.paie, colClasses = lignes.paie.classes.input)
if (!is.null(Lignes.paie)) message("Chargement des lignes de paie.") else stop("Chargement des lignes de paie en échec.")
Read.csv("Bulletins.paie", bulletins.paie, colClasses = bulletins.paie.classes.input)
if (!is.null(Bulletins.paie)) message("Chargement des bulletins de paie.") else stop("Chargement des bulletins de paie en échec.")
Bulletins.paie <- Bulletins.paie[  Bulletins.paie$Année >= début.période.sous.revue
& Bulletins.paie$Année <= fin.période.sous.revue, ]
Lignes.paie    <- Lignes.paie[  Lignes.paie$Année >= début.période.sous.revue
& Lignes.paie$Année <= fin.période.sous.revue, ]
Bulletins.paie.contiennent.colonnes.requises <- colonnes.requises %in% names(Bulletins.paie)
if (! all(Bulletins.paie.contiennent.colonnes.requises)) {
stop("Il manque les colonnes suivantes au(x) fichier(s) Bulletins de paie :",
colonnes.requises[! Bulletins.paie.contiennent.colonnes.requises])
} else {
message("Contrôle des noms de colonne des bulletins de paie : normal.")
}
if (tester.matricules)  tester.homogeneite.matricules(Lignes.paie)
if (tester.lignes.bulletins.mois)
{
ddply(Bulletins.paie[Bulletins.paie$ ], .(Matricule, Année, Mois), summarise, nMois = nrow)
}
#'---
#'title: false
#'author: false
#'date: false
#'output:
#'html_document:
#'css: style.css
#'---
#'<p class = "centered"><img src = "Altair.bmp" /></p>
#'<p class = "title">RH Exemple</p>
#'
#+ echo = FALSE, warning = TRUE, message = FALSE
# comportement global du programme
# Lorsque l'on n'a que une ou deux années, mettre étudier.variations à FALSE
# Lorsque l'on n'étudie pas une base Xémélios, mettre étudier.tests.statutaires à FALSE
library(compiler)
options(warn = -1, verbose = FALSE, OutDec = ",")
encodage.entrée <- "ISO-8859-1"
# dans cet ordre
try(setwd("Tests/Exemple"), silent = TRUE)
source("prologue.R", encoding = encodage.entrée)
compilerOptions <- setCompilerOptions(suppressAll = TRUE)
JITlevel        <- enableJIT(2)
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"), encoding = encodage.entrée)
installer.paquets(knitr, plyr, ggplot2, assertthat, yaml)
library(knitr)
library(plyr)
library(ggplot2)
library(assertthat)
# problème temporaire avec l'option fig.retina depuis fin mai 2014
knitr::opts_chunk$set(fig.width = 7.5, echo = FALSE, warning = FALSE, message = FALSE, results = 'asis')
dir.create(chemin.dossier.bases, recursive = TRUE)
#'<p class = "centered"><b>Exercices `r paste(début.période.sous.revue, "à", fin.période.sous.revue)` </b></p>
#'<p class = "author">Fabrice Nicol</h1>
#'
#+ echo = FALSE
#'`r format(Sys.Date(), "%a %d %b %Y")`
#'
nombre.exercices <- fin.période.sous.revue - début.période.sous.revue + 1
# Le format est jour/mois/année avec deux chiffres-séparateur-deux chiffres-séparateur-4 chiffres.
# Le séparateur peut être changé en un autre en modifiant le "/" dans date.format
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes
# Contrôle de cohérence
#  on vérifie que chaque code de paie est associé, dans le fichier des codes de paiement (par défaut, racinecodes.csv),
#  que à chaque code donné on a associé un et un seul type de rémunération ("INDEMNITAIRE", "TRAITEMENT", etc.)
if (file.exists(chemin(nom.fichier.codes.paiement)))
{
Codes.paiement <- read.csv.skip(nom.fichier.codes.paiement)
if (nlevels(as.factor(Codes.paiement$Code)) != nrow(unique(Codes.paiement[ , c(étiquette.code, "Type.rémunération")])))
{
message("Davantage de types de rémunérations que de codes distincts : incohérence de la base de codes.")
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
print(unique(merge(data.frame(Code = names(V),
"Nombre de types de rémunérations distincts" = V,
row.names=NULL),
Codes.paiement[Codes.paiement$Code %in% names(V),
c(étiquette.code, "Type.rémunération")],
by = étiquette.code,
all=TRUE)))
stop("Vérifier le fichier " %+% nom.fichier.codes.paiement)
}
message("Chargement des codes de paiement.")
}
fichier.personnels.existe <- file.exists(chemin(nom.fichier.personnels))
if (fichier.personnels.existe)
{
base.personnels.catégorie <- read.csv.skip(nom.fichier.personnels)
message("Chargement du fichier des catégories statutaires des personnels.")
}
# Lignes de paie
# On peut lire jusqu'à 50 fichiers csv de lignes de paie qui seront générés au format :
# "chemin dossier + racine-Lignes de paye-j.csv" où racine est un bref identifiant du type de contrôle (exemple : "c2a-", "PEV-", ...)
lignes.paie <- nom.fichier.paie %+% "-" %+% 1:50 %+% ".csv"
lignes.paie <- lignes.paie[file.exists(chemin(lignes.paie))]
# Bulletins de paie
# On peut lire jusqu'à 10 fichiers csv de bulletins de paie qui seront générés au format :
# "chemin dossier + racine-Bulletins de paye-j.csv"
bulletins.paie <- nom.bulletin.paie %+% "-" %+% 1:10 %+% ".csv"
bulletins.paie <- bulletins.paie[file.exists(chemin(bulletins.paie))]
# Programme principal
# Bases
# Lignes de paie
# On ne retient que les bases ayant pour années au minimum début.période.sous.revue
# et au maximum fin.période.sous.revue, qui contiennent toutes les colonnes requises
# pour le contrôle
Read.csv("Lignes.paie", lignes.paie, colClasses = lignes.paie.classes.input)
if (!is.null(Lignes.paie)) message("Chargement des lignes de paie.") else stop("Chargement des lignes de paie en échec.")
Read.csv("Bulletins.paie", bulletins.paie, colClasses = bulletins.paie.classes.input)
if (!is.null(Bulletins.paie)) message("Chargement des bulletins de paie.") else stop("Chargement des bulletins de paie en échec.")
Bulletins.paie <- Bulletins.paie[  Bulletins.paie$Année >= début.période.sous.revue
& Bulletins.paie$Année <= fin.période.sous.revue, ]
Lignes.paie    <- Lignes.paie[  Lignes.paie$Année >= début.période.sous.revue
& Lignes.paie$Année <= fin.période.sous.revue, ]
Bulletins.paie.contiennent.colonnes.requises <- colonnes.requises %in% names(Bulletins.paie)
if (! all(Bulletins.paie.contiennent.colonnes.requises)) {
stop("Il manque les colonnes suivantes au(x) fichier(s) Bulletins de paie :",
colonnes.requises[! Bulletins.paie.contiennent.colonnes.requises])
} else {
message("Contrôle des noms de colonne des bulletins de paie : normal.")
}
if (tester.matricules)  tester.homogeneite.matricules(Lignes.paie)
if (tester.lignes.bulletins.mois)
{
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Mois", "Brut") ], .(Matricule, Année, Mois), summarise, nMois = nrow)
temp  <- temp[ , temp$Brut != 0]
names(temp)["Mois"]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année") ]), .(Matricule, Année, Mois), summarise, nMois = nrow)
names(temp2)["Mois"] <- "Mois.Lignes"
M     <- merge(temp, temp2, all = TRUE)
print(M)
}
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Mois", "Brut") ], .(Matricule, Année, Mois), summarise, nMois = nrow)
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Mois", "Brut") ], .(Matricule, Année, Mois), summarise,  nrow)
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Mois", "Brut") ], .(Matricule, Année, Mois),  nrow)
temp
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Brut") ], .(Matricule, Année, Mois),  nrow)
temp  <- temp[ , temp$Brut != 0]
names(temp)["V1"]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année") ]), .(Matricule, Année, Mois),  nrow)
names(temp2)["V1"] <- "Mois.Lignes"
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Brut") ], .(Matricule, Année),  nrow)
temp  <- temp[ , temp$Brut != 0]
names(temp)["V1"]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année") ]), .(Matricule, Année, Mois),  nrow)
names(temp2)["V1"] <- "Mois.Lignes"
temp
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année", "Brut") ], .(Matricule, Année),  nrow)
temp
View(Bulletins.paie)
temp  <- ddply(Bulletins.paie[ , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
temp  <- temp[ , temp$Brut != 0]
names(temp)["V1"]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année") ]), .(Matricule, Année, Mois),  nrow)
names(temp2)["V1"] <- "Mois.Lignes"
temp  <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)["V1"]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Années),  nrow)
names(temp2)["V1"] <- "Mois.Lignes"
M     <- merge(temp, temp2, all = TRUE)
print(M)
temp  <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
temp
names(temp)["V1"]  <- "Mois.Bulletins"
names(temp)[["V1"]]  <- "Mois.Bulletins"
names(temp)
names(temp)$V1
temp  <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)[3]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Années),  nrow)
names(temp2)[3] <- "Mois.Lignes"
M     <- merge(temp, temp2, all = TRUE)
print(M)
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Années),  nrow)
temp  <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)[3]  <- "Mois.Bulletins"
temp2 <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Année),  nrow)
names(temp2)[3] <- "Mois.Lignes"
M     <- merge(temp, temp2, all = TRUE)
M
names(M)
if (tester.lignes.bulletins.mois)
{
temp   <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)[3]  <- "Mois.Bulletins"
temp2  <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Année),  nrow)
names(temp2)[3] <- "Mois.Lignes"
M      <- merge(temp, temp2, all = TRUE)
M$Diff <- ifselse(is.na(M$Mois.Bulletins), 0, M$Mois.Bulletins)  - ifelse(is.na(M$Mois.Lignes), 0, M$Mois.Lignes)
Matrice.différence.bulletins.lignes.NMois <- M[M$Diff != 0, ]
if (!is.null(M) & nrow(M) > 0)
{
print(M)
rm(temp, temp2, M)
sauv.bases(chemin.dossier.bases, "Matrice.différence.bulletins.lignes.NMois")
stop("Le nombre de bulletins de paye est différent du nombre de mois payés en lignes de paye.
Voir Matrice.différence.bulletins.lignes.NMois.csv dans le dossier Bases")
}
if (tester.lignes.bulletins.mois) {
temp   <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)[3]  <- "Mois.Bulletins"
temp2  <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Année),  nrow)
names(temp2)[3] <- "Mois.Lignes"
M      <- merge(temp, temp2, all = TRUE)
M$Diff <- ifelse(is.na(M$Mois.Bulletins), 0, M$Mois.Bulletins)  - ifelse(is.na(M$Mois.Lignes), 0, M$Mois.Lignes)
Matrice.différence.bulletins.lignes.NMois <- M[M$Diff != 0, ]
if (!is.null(M) & nrow(M) > 0)    {
print(M)
rm(temp, temp2, M)
sauv.bases(chemin.dossier.bases, "Matrice.différence.bulletins.lignes.NMois")
stop("Le nombre de bulletins de paye est différent du nombre de mois payés en lignes de paye.
Voir Matrice.différence.bulletins.lignes.NMois.csv dans le dossier Bases")
}
if (tester.lignes.bulletins.mois) {
temp   <- ddply(Bulletins.paie[Bulletins.paie$Brut != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)[3]  <- "Mois.Bulletins"
temp2  <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Année),  nrow)
names(temp2)[3] <- "Mois.Lignes"
M      <- merge(temp, temp2, all = TRUE)
M$Diff <- ifelse(is.na(M$Mois.Bulletins), 0, M$Mois.Bulletins)  - ifelse(is.na(M$Mois.Lignes), 0, M$Mois.Lignes)
Matrice.différence.bulletins.lignes.NMois <- M[M$Diff != 0, ]
if (!is.null(Matrice.différence.bulletins.lignes.NMois) & nrow(Matrice.différence.bulletins.lignes.NMois) > 0)    {
print(Matrice.différence.bulletins.lignes.NMois)
rm(temp, temp2, M)
sauv.bases(chemin.dossier.bases, "Matrice.différence.bulletins.lignes.NMois")
stop("Le nombre de bulletins de paye est différent du nombre de mois payés en lignes de paye.
Voir Matrice.différence.bulletins.lignes.NMois.csv dans le dossier Bases")
}
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
bulletins.paie.classes.input
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/prologue.R', echo=TRUE)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
print(Matrice.différence.bulletins.lignes.NMois)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
if (tester.lignes.bulletins.mois) {
temp   <- ddply(Bulletins.paie[Bulletins.paie$Net != 0 , c("Matricule", "Année") ], .(Matricule, Année),  nrow)
names(temp)[3]  <- "Mois.Bulletins"
temp2  <- ddply(unique(Lignes.paie[ , c("Matricule", "Année", "Mois") ]), .(Matricule, Année),  nrow)
names(temp2)[3] <- "Mois.Lignes"
M      <- merge(temp, temp2, all = TRUE)
M$Diff <- ifelse(is.na(M$Mois.Bulletins), 0, M$Mois.Bulletins)  - ifelse(is.na(M$Mois.Lignes), 0, M$Mois.Lignes)
Matrice.différence.bulletins.lignes.NMois <- M[M$Diff != 0, ]
if (!is.null(Matrice.différence.bulletins.lignes.NMois) & nrow(Matrice.différence.bulletins.lignes.NMois) > 0)    {
print(Matrice.différence.bulletins.lignes.NMois)
rm(temp, temp2, M)
sauv.bases(chemin.dossier.bases, "Matrice.différence.bulletins.lignes.NMois")
stop("Le nombre de bulletins de paye est différent du nombre de mois payés en lignes de paye.
Voir Matrice.différence.bulletins.lignes.NMois.csv dans le dossier Bases")
}
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
