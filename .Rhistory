# Lorsque l'on n'a que une ou deux années, mettre étudier.variations à FALSE
# Lorsque l'on n'étudie pas une base Xémélios, mettre étudier.tests.statutaires à FALSE
library(compiler)
options(warn = -1, verbose = FALSE, OutDe = ",", encoding = "UTF-8")
try(setwd("Tests/Sierg"))
source("prologue.R", chdir=TRUE)
compilerOptions <- setCompilerOptions(suppressAll = TRUE)
JITlevel <- enableJIT(3)
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"))
base.personnels.catégorie <- data.frame(NULL)
installer.paquets(knitr, plyr, ggplot2, assertthat, yaml)
library(knitr)
library(plyr)
library(ggplot2)
library(assertthat)
knitr::opts_chunk$set(fig.retina = 2, fig.width = 7.5, echo = FALSE, warning = FALSE, message = FALSE, results = 'asis')
dir.create(chemin("Bases"), recursive = TRUE)
#'<p class = "centered"><b>Exercices `r paste(début.période.sous.revue, "à", fin.période.sous.revue)` </b></p>
#'<p class = "author">Fabrice Nicol</h1>
#'
#+ echo = FALSE
#'`r format(Sys.Date(), "%a %d %b %Y")`
#'
nombre.exercices <- fin.période.sous.revue - début.période.sous.revue + 1
étiquette.montant <- "Montant"
seuil.troncature <- 99
# Le format est jour/mois/année avec deux chiffres-séparateur-deux chiffres-séparateur-4 chiffres.
#Le séparateur peut être changé en un autre en modifiant le "/" dans fate.format
nom.fichier.paie  <- "Lignes de paye"
nom.bulletin.paie <- "Bulletins de paye"
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes, Avantages en nature
champ.détection.élus <- "Service"
champ.nir <- "Nir"
libellé.élus <- "Elus"
codes.paiement          <- "LISTE DES RUBRIQUES DE TRAITEMENT UTILISEES EN 2012.csv"
#matricule.avantage  <- "LISTE DES AGENTS AYANT BENEFICIE D'AVANTAGE EN NATURE EN 2012.csv"
code.traitement <- 1010
fichier.personnels <- "Catégories des personnels"
nom.fichier.personnels <- paste0(fichier.personnels, ".csv")
fichier.personnels.existe <- file.exists(chemin(nom.fichier.personnels))
if (fichier.personnels.existe)
base.personnels.catégorie = read.csv.skip(nom.fichier.personnels)
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
lignes.paie <- outer(début.période.sous.revue:fin.période.sous.revue, 1:10, paste, nom.fichier.paie, "csv", sep=".")
#/* Bulletins de paie */
bulletins.paie <- paste(début.période.sous.revue:fin.période.sous.revue, nom.bulletin.paie, "csv", sep=".")
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
lignes.paie <- lignes.paie[file.exists(chemin(lignes.paie))]
Lignes.paie<-Read.csv(lignes.paie)
Bulletins.paie <- Read.csv(bulletins.paie)
# suppression des colonnes Nom Prénom redondantes
Bulletins.paie <-  selectionner.cle.matricule.mois(Bulletins.paie, Lignes.paie)
codes.paiement          <- read.csv.skip(codes.paiement)
# Matricule.avantage  <- read.csv.skip(matricule.avantage)
# Matricule.avantage  <- selectionner.cle.matricule(Matricule.avantage, Matricule.catégorie)
if (!setequal(intersect(names(Lignes.paie), names(Bulletins.paie)), c("Mois", "Année", étiquette.matricule)))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
Bulletins.paie.Lignes.paie <- merge(Bulletins.paie, Lignes.paie)
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Bulletins.paie
matricules.à.identifier <- unique(Bulletins.paie.Lignes.paie[, c(étiquette.année, "Service", "Grade", "Nom",  étiquette.matricule)])
matricules.à.identifier
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
Analyse.rémunérations
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
V=c(1 , 2, 3)
V=c(a=1 , b=2, c=3)
V["c"]
"c" %in% names(V)
"d" %in% names(V)
V[-c]
V[-"c"]
V["c"] <- NULL
V[["c"]] <- NULL
V["c"] <- NULL
V[c] <- NULL
V$c <- NULL
V
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
source('~/Dev/altair/Tests/Sierg/bibliotheque.fonctions.paie.R', echo=TRUE)
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
head(Analyse.rémunérations)
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))]
Analyse.rémunérations.dernier.exercice <- Analyse.rémunérations[Analyse.rémunérations$Année == année, ]
if (fichier.personnels.existe)
{
Analyse.rémunérations.dernier.exercice <- merge(Analyse.rémunérations.dernier.exercice, base.personnels.catégorie, by = étiquette.matricule, all = FALSE)
}
Analyse.rémunérations.dernier.exercice
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))]
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c("rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations")]
Analyse.rémunérations.dernier.exercice[ ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c("rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations")]
Analyse.rémunérations.dernier.exercice[  Statut %in% c("TITULAIRE", "STAGIAIRE"),
c("rémunération.contractuelle.ou.indemnitaire", "autres.rémunérations")]
Analyse.rémunérations.dernier.exercice
head(Analyse.rémunérations.dernier.exercice)
liste.matricules.élus
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))]
Analyse.rémunérations.dernier.exercice
head(Analyse.rémunérations.dernier.exercice)
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"), ]
Analyse.rémunérations.dernier.exercice[ Statut %in% c("TITULAIRE", "STAGIAIRE"), ]
head(Analyse.rémunérations.dernier.exercice[ Statut %in% c("TITULAIRE", "STAGIAIRE"), ])
Analyse.rémunérations.dernier.exercice
View(`Analyse.rémunérations.dernier.exercice`)
liste.matricules.élus
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))]
head(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"), )
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))]
head(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"), )
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))])
head(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
c(ic("rémunération.contractuelle.ou.indemnitaire"), ic("autres.rémunérations"))])
head(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
])
head(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus,
])
Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus,
]
na.omit(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus,
])
na.omit(Analyse.rémunérations.dernier.exercice[ ! Matricule %in% liste.matricules.élus & ! Statut %in% c("TITULAIRE", "STAGIAIRE"),
])
na.omit(Analyse.rémunérations.dernier.exercice[ ! Analyse.rémunérations.dernier.exercice$Matricule %in% liste.matricules.élus & ! Analyse.rémunérations.dernier.exercice$Statut %in% c("TITULAIRE", "STAGIAIRE"),
])
codes.paiement <- cbind(codes.paiement[order(substr(codes.paiement$Code,1,3)), ],
eval(étiquette.type.rémunération) = character(nrow(codes.paiement)))
codes.paiement <- cbind(codes.paiement[order(substr(codes.paiement$Code,1,3)), ],
get(étiquette.type.rémunération) = character(nrow(codes.paiement)))
codes.paiement <- cbind(codes.paiement[order(substr(codes.paiement$Code,1,3)), ],
character(nrow(codes.paiement)))
names(codes.paiement)[3] <- étiquette.type.rémunération
étiquette.type.rémunération
source('~/Dev/altair/Tests/Sierg/sierg.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
moyenne.rémunération.annuelle.sur.période
attach(Analyse.variations.synthèse)
moyenne.rémunération.annuelle.sur.période
moyenne.rémunération.annuelle.sur.période[statut == TITULAIRE]
moyenne.rémunération.annuelle.sur.période[statut == "TITULAIRE"]
hist(positive(moyenne.rémunération.annuelle.sur.période)/1000,
xlab = paste0("Sur la période ",début.période.sous.revue,"-",fin.période.sous.revue," en milliers d'euros"),
ylab = "Effectif",
main = "Rémunération nette moyenne",
col = "blue",
nclass = 100)
#'
#'##
#+ fig.height=6.5
hist(moyenne.rémunération.annuelle.sur.période[moyenne.rémunération.annuelle.sur.période >0 & (statut == "TITULAIRE"  | statut == "STAGIAIRE")]/1000,
xlab = paste0("Sur la période ",début.période.sous.revue,"-",fin.période.sous.revue," en milliers d'euros"),
ylab = "Effectif",
main = "Rémunération nette moyenne des fonctionnaires",
col = "blue",
nclass = 100)
source('~/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
source('~/Dev/altair/Tests/Exemple/prologue.R', echo=TRUE)
source('~/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
source('~/.active-rstudio-document')
View(Bulletins.paie.Lignes.paie)
View(Bulletins.paie)
source('~/Dev/altair/Tests/Exemple/exemple.R')
View(Bulletins.paie.Lignes.paie)
somme.brut.non.élu  <- sum(unique(Bulletins.paie.Lignes.paie[  Bulletins.paie.Lignes.paie$Année == année
& Bulletins.paie.Lignes.paie$a.indemnité.élu == TRUE,
c(étiquette.matricule, "Mois", "Brut")])$Brut)
somme.brut.non.élu
source('~/Dev/altair/Tests/Exemple/exemple.R')
somme.brut.non.élu
année <- 2011
somme.brut.non.élu  <- sum(unique(Bulletins.paie.Lignes.paie[  Bulletins.paie.Lignes.paie$Année == année
& Bulletins.paie.Lignes.paie$a.indemnité.élu == FALSE,
c(étiquette.matricule, "Mois", "Brut")])$Brut)
somme.brut.non.élu
attach(Analyse.rémunérations.premier.exercice, warn.conflicts = FALSE)
masse.rémunérations.brutes    <- sum(total.rémunérations)
masse.rémunérations.brutes
delta  <- somme.brut.non.élu - masse.rémunérations.brutes
delta
source('~/Dev/altair/Tests/Exemple/exemple.R')
#'---
#'title: false
#'author: false
#'date: false
#'output:
#'html_document:
#'css: style.css
#'---
#'<p class = "centered"><img src = "altair.png" /></p>
#'<p class = "title">RH Exemple</p>
#'
#+ echo = FALSE, warning = FALSE, message = FALSE
# comportement global du programme
sauvegarder.bases <- TRUE
# Lorsque l'on n'a que une ou deux années, mettre étudier.variations à FALSE
# Lorsque l'on n'étudie pas une base Xémélios, mettre étudier.tests.statutaires à FALSE
library(compiler)
options(warn = -1, verbose = FALSE, OutDec = ",")
# dans cet ordre
try(setwd("Tests/Exemple"), silent = TRUE)
source("prologue.R")
compilerOptions <- setCompilerOptions(suppressAll = TRUE)
JITlevel <- enableJIT(2)
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"))
base.personnels.catégorie <- data.frame(NULL)
installer.paquets(knitr, plyr, ggplot2, assertthat, yaml)
library(knitr)
library(plyr)
library(ggplot2)
library(assertthat)
knitr::opts_chunk$set(fig.retina = 2, fig.width = 7.5, echo = FALSE, warning = FALSE, message = FALSE, results = 'asis')
dir.create(chemin("Bases"), recursive = TRUE)
#'<p class = "centered"><b>Exercices `r paste(début.période.sous.revue, "à", fin.période.sous.revue)` </b></p>
#'<p class = "author">Fabrice Nicol</h1>
#'
#+ echo = FALSE
#'`r format(Sys.Date(), "%a %d %b %Y")`
#'
nombre.exercices <- fin.période.sous.revue - début.période.sous.revue + 1
étiquette.montant <- "Montant"
seuil.troncature <- 99
# Le format est jour/mois/année avec deux chiffres-séparateur-deux chiffres-séparateur-4 chiffres.
#Le séparateur peut être changé en un autre en modifiant le "/" dans fate.format
nom.fichier.paie  <- "Lignes de paye"
nom.bulletin.paie <- "Bulletins de paye"
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes
champ.détection.élus <- "Service"
champ.nir <- "Nir"
libellé.élus <- "Elus"
codes.paiement          <- "codes.csv"
code.traitement <- 1010
fichier.personnels <- "Catégories des personnels"
nom.fichier.personnels <- paste0(fichier.personnels, ".csv")
fichier.personnels.existe <- file.exists(chemin(nom.fichier.personnels))
if (fichier.personnels.existe)
base.personnels.catégorie = read.csv.skip(nom.fichier.personnels)
#/* Lignes de paie
# On peut lire jusqu'à 10 fichiers csv qui seront générés au format
#  "chemin dossier + paies-Bulletins de paye-j.csv" */
lignes.paie <- outer(début.période.sous.revue:fin.période.sous.revue, 1:10, paste, nom.fichier.paie, "csv", sep=".")
#/* Bulletins de paie */
bulletins.paie <- paste(début.période.sous.revue:fin.période.sous.revue, nom.bulletin.paie, "csv", sep=".")
codes.NBI <- c("1012", "101B", "101M", "4652", "4672")
#/* Programme principal
##
#  Bases
##
# Lignes de paie  */
lignes.paie <- lignes.paie[file.exists(chemin(lignes.paie))]
Lignes.paie<-Read.csv(lignes.paie)
Bulletins.paie <- Read.csv(bulletins.paie)
# suppression des colonnes Nom Prénom redondantes
Bulletins.paie <- selectionner.cle.matricule.mois(Bulletins.paie, Lignes.paie)
codes.paiement <- read.csv.skip(codes.paiement)
if (!setequal(intersect(names(Lignes.paie), names(Bulletins.paie)), c("Mois", "Année", étiquette.matricule)))
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
# Alternative en cas de difficulté :
#
# Bulletins.paie.Lignes.paie <- do.call(rbind, lapply(début.période.sous.revue:fin.période.sous.revue,
#                                                     function(x)
#                                                        merge(Bulletins.paie[Bulletins.paie$Année == x, ],
#                                                              Lignes.paie[Lignes.paie$Année == x, ],
#                                                              by=c(étiquette.matricule, "Mois"))))
Bulletins.paie.Lignes.paie <- merge(Bulletins.paie, Lignes.paie)
Bulletins.paie.dernier.mois <- Bulletins.paie[Bulletins.paie$Année == fin.période.sous.revue & Bulletins.paie$Mois == 12, ]
liste.matricules.fonctionnaires <- unique(Bulletins.paie.dernier.mois[Bulletins.paie.dernier.mois$Statut %in% c("TITULAIRE", "STAGIAIRE"), étiquette.matricule])
liste.matricules.élus   <- unique(Bulletins.paie.dernier.mois[Bulletins.paie.dernier.mois[champ.détection.élus] == libellé.élus, étiquette.matricule])
Bulletins.paie.nir.total.hors.élus <- Bulletins.paie.dernier.mois[ ! Bulletins.paie.dernier.mois$Matricule %in% liste.matricules.élus, c(étiquette.matricule,champ.nir)]
Bulletins.paie.nir.fonctionnaires  <- Bulletins.paie.dernier.mois[Bulletins.paie.dernier.mois$Matricule %in% liste.matricules.fonctionnaires, c(étiquette.matricule, champ.nir)]
# Age au 31 décembre de l'exercice dernier.exerciceal de la période sous revue
années.fonctionnaires   <- fin.période.sous.revue - (as.numeric(substr(as.character(Bulletins.paie.nir.fonctionnaires[,champ.nir]), 2, 3)) + 1900)
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[,champ.nir]), 2, 3)) + 1900)
########### Démographie ########################
#'# 1. Statistiques de population
#'
#'### 1.1 Ensemble des personnels non élus
hist(années.total.hors.élus,
xlab = paste("Âge au 31 décembre",fin.période.sous.revue),
xlim = c(18, 75),
ylab = "Effectif",
main = "Pyramide des âges",
col = "blue",
nclass = 50)
#'
#'[Lien vers la base des âges](Bases/Bulletins.paie.nir.total.hors.élus.csv)
#'
Résumé(paste0("Âge des personnels <br>au 31/12/",fin.période.sous.revue), années.total.hors.élus, align = 'c')
#'Effectif total: `r length(années.total.hors.élus)`
#'
#'######      <br>
#'
#'### 1.2 Ensemble des fonctionnaires stagiaires et titulaires
hist(années.fonctionnaires,
xlab = paste("Âge au 31 décembre",fin.période.sous.revue),
xlim = c(18,68),
ylab = "Effectif",
main = "Pyramide des âges des fonctionnaires",
col = "navy",
nclass = 50)
#'
#'[Lien vers la base des âges](Bases/Bulletins.paie.nir.fonctionnaires.csv)
#'
Résumé(paste0("Âge des personnels <br>au 31/12/",fin.période.sous.revue), années.fonctionnaires, align = 'c')
#'
#'**Effectif total: `r length(années.fonctionnaires)`**
#'
Analyse.variations.par.exercice <- ddply(Bulletins.paie,
c(étiquette.matricule, étiquette.année),
summarise,
Montant.net = sum(Net.à.Payer),
Statut = Statut[length(Net.à.Payer)],
mois.entrée = ifelse((minimum <- min(Mois)) != Inf, minimum, 0),
mois.sortie = ifelse((maximum <- max(Mois)) != -Inf, maximum, 0),
nb.jours = calcul.nb.jours.mois(mois.entrée[1], mois.sortie[1], Année[1]))
# Analyse.variations.par.exercice2 <- ddply(Analyse.variations.par.exercice,
#               étiquette.matricule,
#               summarise,
#               nb.exercices = length(Année))
#
# Analyse.variations.par.exercice <- merge(Analyse.variations.par.exercice, Analyse.variations.par.exercice2)
Analyse.variations.synthèse <- ddply(Analyse.variations.par.exercice,
.(Matricule),
summarise,
Nexercices = length(Année),
nb.jours.exercice.début = nb.jours[1],
nb.jours.exercice.sortie = nb.jours[Nexercices],
total.jours = sum(nb.jours),
rémunération.début = ifelse(nb.jours.exercice.début == 0,
0,
Montant.net[1]/nb.jours.exercice.début*365),
rémunération.sortie = ifelse(nb.jours.exercice.sortie == 0,
0,
Montant.net[Nexercices]/nb.jours.exercice.sortie*365),
moyenne.rémunération.annuelle.sur.période = ifelse(total.jours == 0, 0, sum(Montant.net)*365/total.jours),
variation.rémunération.jour = calcul.variation(rémunération.début,
rémunération.sortie,
nb.jours.exercice.début,
nb.jours.exercice.sortie,
Nexercices),
variation.moyenne.rémunération.jour = ifelse(total.jours == 0, 0,
( ( 1 + variation.rémunération.jour / 100 ) ^ (365 / total.jours) - 1) * 100),
plus.2.ans = (total.jours >= 2*365),
moins.2.ans = (total.jours < 2*365),
moins.1.an  = (total.jours < 365),
moins.six.mois = (total.jours < 365/2),
statut = Statut[1])
####  On pourrait aussi plus simplement poser  ###
#  que plus.deux.ans soit défini comme length(Année) >= 2.
#  On préfère une définition à partir de total.jours pour
#  avoir une définition cohérente sur toutes les durées, y.c infra-annuelles
attach(Analyse.variations.par.exercice, warn = FALSE)
Analyse.variations.par.exercice <- na.omit(Analyse.variations.par.exercice[ nb.jours[1] > seuil.troncature
&  nb.jours[length(Année)] > seuil.troncature, ])
Analyse.variations.par.exercice <- mutate(Analyse.variations.par.exercice,
plus.2.ans = Matricule
%in%
Analyse.variations.synthèse[Analyse.variations.synthèse$plus.2.ans, étiquette.matricule])
detach(Analyse.variations.par.exercice)
attach(Analyse.variations.synthèse, warn.conflicts = FALSE)
#'
#'<!-- BREAK -->
#'
#'### 1.3 Effectifs des personnels par durée de service
#'
#'**Personnels en fonction des exercices `r début.période.sous.revue` à `r fin.période.sous.revue` inclus :**
#'
Tableau(c("Plus de 2 ans",
"Moins de 2 ans",
"Moins d'un an",
"Moins de six mois"),
sum(plus.2.ans),
sum(moins.2.ans),
sum(moins.1.an),
sum(moins.six.mois))
#'
detach(Analyse.variations.synthèse)
qplot(factor(Année),
data = Analyse.variations.par.exercice,
geom = "bar",
fill = factor(!plus.2.ans),
main = paste("Evolutions entre", début.période.sous.revue,"et", fin.période.sous.revue),
xlab = étiquette.année,
ylab = "Effectif",
asp = 4) +
scale_fill_discrete(name = "Personnels en fonction",
breaks = c(TRUE, FALSE),
labels = c("Moins de deux ans", "Plus de deux ans"))
#'
#'**Nota:**
#'Personnels en place : ayant servi au moins 730 jours pendant la période.
#'Toutes les durées de service sont calculées en multiples de 365 jours.
#'Dans les statistiques de cette section, les élus ne sont pas pris en compte.
#'
# fusion matricule | avantage | catégorie par Matricule
# peut aisément être modifié ainsi
Bulletins.paie.Lignes.paie <- mutate(Bulletins.paie.Lignes.paie,
a.indemnité.élu = Code %in% codes.paiement[codes.paiement$Type.rémunération
== "ELU","Code.rubrique"],
montant.traitement.indiciaire
= Montant*(Code %in% codes.paiement[codes.paiement$Type.rémunération
== "TRAITEMENT","Code.rubrique"]),
montant.primes
= Montant*(Code %in% codes.paiement[codes.paiement$Type.rémunération
== "INDEMNITAIRE.OU.CONTRACTUEL","Code.rubrique"]),
montant.autres.rémunérations
= Montant*(Code %in% codes.paiement[codes.paiement$Type.rémunération
== "AUTRES","Code.rubrique"]),
montant.indemnité.élu
= Montant*(a.indemnité.élu == TRUE))
Analyse.rémunérations <- ddply(Bulletins.paie.Lignes.paie,
.(Matricule, Année),
summarise,
Statut = Statut[1],
Service = Service[1],
traitement.indiciaire = sum(montant.traitement.indiciaire),
rémunération.contractuelle.ou.indemnitaire = sum(montant.primes),
indemnités.élu                             = sum(montant.indemnité.élu),
autres.rémunérations                       = sum(montant.autres.rémunérations),
total.rémunérations                        = traitement.indiciaire
+ rémunération.contractuelle.ou.indemnitaire
+ autres.rémunérations,
part.rémunération.contractuelle.ou.indemnitaire =
ifelse(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire == 0, 0,
rémunération.contractuelle.ou.indemnitaire /
(traitement.indiciaire + rémunération.contractuelle.ou.indemnitaire)*100))
# on ne compte pas les élus dans le total (voir 5.6)
année <- début.période.sous.revue
colonnes.sélectionnées <- c("traitement.indiciaire",
"rémunération.contractuelle.ou.indemnitaire",
"autres.rémunérations",
"total.rémunérations",
"part.rémunération.contractuelle.ou.indemnitaire",
étiquette.matricule)
# pour année début #
###########  Analyse des rémunérations  début de période###################
#  ATTENTION : les années doivent être SUCCESSIVES                        #
Analyse.rémunérations.premier.exercice <- Analyse.rémunérations[Analyse.rémunérations$Année == année, ]
if (fichier.personnels.existe)
{
Analyse.rémunérations.premier.exercice <- merge(Analyse.rémunérations.premier.exercice, base.personnels.catégorie, by = étiquette.matricule, all = FALSE)
colonnes.sélectionnées <- c(colonnes.sélectionnées, "Catégorie")
}
attach(Analyse.rémunérations.premier.exercice, warn.conflicts = FALSE)
########### Analyse statique premier exercice ########################
#'# 2. Rémunérations brutes : analyse pour l'exercice `r année`
#'
#'## 2.1 Statistiques de position globales (tous statuts)
#'
#/* La moyenne est tirée vers le haut par les outlyers */
masse.indemnitaire            <- sum(rémunération.contractuelle.ou.indemnitaire)
masse.indiciaire              <- sum(traitement.indiciaire)
masse.rémunérations.brutes    <- sum(total.rémunérations)
ratio.global.masse.indemnitaire  <- masse.indemnitaire/(masse.indiciaire+masse.indemnitaire)*100
#'### Cumuls des rémunérations brutes pour l'exercice `r année`
#'
Tableau(c("Masse indiciaire", "Masse indemnitaire"),
masse.indiciaire, masse.indemnitaire)
#'
#'<!-- BREAK -->
#'
Tableau(c("Masse des rémunérations brutes", "Part de la masse indemnitaire"),
masse.rémunérations.brutes, ratio.global.masse.indemnitaire)
#'
#'Cumuls réalisés sur les lignes de paie. Les indemnités d'élu ne sont pas prises en compte.
#'
#somme.brut.non.élu  <- sum(Bulletins.paie[Bulletins.paie$Année == année & Bulletins.paie$Service != "Elus", "Brut"])
liste.élus <- unique(Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$a.indemnité.élu == FALSE, c("Matricule", "Mois")])
# somme.brut.non.élu  <- sum(unique(Bulletins.paie.Lignes.paie[  Bulletins.paie.Lignes.paie$Année == année
#                                                       & Bulletins.paie.Lignes.paie$a.indemnité.élu == FALSE,
#                                                       c(étiquette.matricule, "Mois", "Brut")])$Brut)
somme.brut.non.élu <- sum(
merge(Bulletins.paie[Bulletins.paie$Année == année , c("Matricule", "Mois", "Brut")], liste.élus)$Brut
)
merge(Bulletins.paie[Bulletins.paie$Année == année , c("Matricule", "Mois", "Brut")], liste.élus)
unique(Bulletins.paie.Lignes.paie$Code)
unique(Bulletins.paie.Lignes.paie[,c("Code", "Libellé")]
)
C <- unique(Bulletins.paie.Lignes.paie[,c("Code", "Libellé")])
C[sort(C$Code),]
C[order(C$Code),]
C[order(substr(C$Code,1,3)),]
setwd("~/Dev/altair/Tests/Exemple")
spin("exemple.R", format="Rnw")
library(knitr)
spin("exemple.R", format="Rnw")
knit2pdf("exemple.tex")
help(texi2dvi)
install.packages("texi2dvi")
help(knit2pdf)
help(spin)
spin("exemple.R", knit=FALSE, format="Rnw")
knit2pdf("exemple.Rnw")
source('~/.active-rstudio-document')
source('~/Dev/altair/Tests/Exemple/exemple.R')
spin("exemple.R", format="Rnw")
