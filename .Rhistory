TM - TN
(TM/TN - 1)*100
sum(TM)
sum(TN)
N
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.traitement, Codes.indemnitaires), c("Matricule", "Montant")]
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire), c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
(TM/TN - 1)*100
length(TN)
length(TM)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiment.élu), c("Matricule", "Montant")]
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.élu), c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres), c("Matricule", "Montant")]
length(TN)
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 , c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
setdiff(Codes.paiement$Code, c(Codes.paiement.indemnitaire, Codes.paiement.traitement, Codes.paiement.élu, CCodes.paiement.autres))
setdiff(Codes.paiement$Code, c(Codes.paiement.indemnitaire, Codes.paiement.traitement, Codes.paiement.élu, Codes.paiement.autres))
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.indemnitaire, Codes.paiement.traitement, Codes.paiement.élu, Codes.paiement.autres), c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% Codes.paiement$Code, c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
nlevels(N$Code)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% Codes.paiement$Code, c("Matricule", "Montant", "Code")]
nlevels(N$Code)
N$Code
unique(N$Code)
setdiff(unique(M$Code), unique(N$Code))
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule", "Brut", "Code")]
setdiff(unique(M$Matricule), unique(N$Matricule))
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 13749 & Bulletins.paie.Lignes.paie$Année == 2010, ]
N
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
codes.paiement.généré
sauv.bases(chemin.dossier.bases, "code.paiement.généré")
sauv.bases(chemin.dossier.bases, "codes.paiement.généré")
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule", "Brut", "Code")]
M <- Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Bulletins.paie$Année == 2010, c("Matricule", "Brut", "Code")]
M <- Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Bulletins.paie$Année == 2010, c("Matricule", "Brut")]
TM <- tapply(M$Brut, M$Matricule, sum)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres), c("Matricule", "Montant", "Code")]
N
TN <- tapply(N$Brut, N$Matricule, sum)
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
length(TM)
(TM/TN -1)*100
(TM/TN -1)
(TM/TN -1)*100
sum(TM)
sum(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R', echo=TRUE)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
sum(TM)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
R <- TM/TN -1
length(TN)
length(TM)
setdiff(unique(M$Matricule), unique(N$Matricule))
M[M$Matricule == 13749]
M[M$Matricule == 13749,]
M[M$Brut > 0, 0]
length(M[M$Brut > 0, "Brut"])
TM
TM == 0
TM[TM] == 0]
TM[TM == 0]
TN[TN == 0]
M[M$Matricule == 17053]
M[M$Matricule == 17053,]
N[N$Matricule == 17053,]
N[N$Matricule == 17064,]
N[N$Matricule == 17073,]
setdiff(M$Matricule, N$Matricule)
M <- M[M$Matricule != 13749,]
TM <- tapply(M$Brut, M$Matricule, sum)
TM - TN
D <- TM - TN
D <- D[abs(D) > 1]
D
lengh(D)
length(D)
M[M$Matricule == 17900,]
N[N$Matricule == 17900, ]
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17900 & Bulletins.paie.Lignes.paie$Année == 2010,]
intersect(Codes.paiement.traitement, Codes.paiement.indemnitaire)
intersect(Codes.paiement.traitement, Codes.paiement.autres)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
N[N$Matricule == 17900, ]
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17900 & Bulletins.paie.Lignes.paie$Année == 2010,]
D
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17844 & Bulletins.paie.Lignes.paie$Année == 2010,]
D
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17786 & Bulletins.paie.Lignes.paie$Année == 2010,]
Lignes.paie[Lignes.paie$Matricule == 17786 & Lignes.paie$Année == 2010,]
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
étiquette.matricule
étiquette.année
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
champ.détection.1
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
Read.csv("Lignes.paie", lignes.paie)
lignes.paie
chemin(lignes.paie)
lignes.paie <- paste0(nom.fichier.paie, "-", 1:50, ".csv")
chemin(lignes.paie)
file.exists(chemin(lignes.paie))
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
Read.csv("Lignes.paie", lignes.paie)
if ( ! all(c(union(clé.fusion, étiquette.matricule),
étiquette.année,
"Mois",
"Statut",
"Brut",
"Net.à.Payer",
"Heures.Sup.",
"Emploi",
champ.nir,
"Temps.de.travail") %in% names(Bulletins.paie))) {
stop("Il manque des colonnes au(x) fichier(s) Bulletins de paie")
} else {
message("Bulletins de paie : contrôle des noms de colonne ... OK")
}
if (tester.matricules)
tester.homogeneite.matricules(Lignes.paie)
if (générer.codes) {
with( Lignes.paie,
codes.paiement.généré <<- unique(Lignes.paie[  Montant > 0 ,
c("Code", étiquette.libellé)]))
codes.paiement.généré <- cbind(codes.paiement.généré[order(substr(as.character(codes.paiement.généré$Code), 1, 3)), ],
character(nrow(codes.paiement.généré)))
names(codes.paiement.généré)[3] <- étiquette.Type.rémunération
sauv.bases(chemin.dossier.bases, "codes.paiement.généré")
#'---
#'
#'# Tableau des codes de paiement
#'
#'##  Renseigner le type de rémunération
#'
#'Utiliser les codes : TRAITEMENT, INDEMNITAIRE.OU.CONTRACTUEL, ELU, AUTRES
#'
kable(codes.paiement.généré, row.names = FALSE)
#'
#'<!-- BREAK -->
if (file.exists(file.path(chemin.dossier.bases, "codes.paiement.généré.csv")))
message("Génération des codes : voir fichier Bases/codes.paiement.généré.csv")
else
message("Les codes n'ont pas été générés.")
stop(" Le programme est arrêté par l'utilisateur.", call.=FALSE)
}
sélectionner.clé("Bulletins.paie", "Lignes.paie")
source('C:/Users/Public/Dev/altair/Tests/Exemple/bibliotheque.fonctions.paie.R', echo=TRUE)
sélectionner.clé("Bulletins.paie", "Lignes.paie")
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
V
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V
nlevels(Codes.paiement$Code)
nrow(unique(Codes.paiement[ , c("Code", "Type.rémunération")]))
class(Code.paiment$Code)
class(Codes.paiment$Code)
(Codes.paiement$Code
)
class(Codes.paiement$Code)
nlevels(as.factor(Codes.paiement$Code))
if (nlevels(as.factor(Codes.paiement$Code)) != nrow(unique(Codes.paiement[ , c("Code", "Type.rémunération")])))
{
message("Davantage de types de rémunérations que de codes distincts : incohérence de la base de codes.")
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
print(unique(merge(data.frame(Code = names(V), "Nombre de libellés distincts" = V, row.names=NULL),
Codes.paiement[Codes.paiement$Code %in% names(V), c("Code", "Type.rémunération")],
by = "Code", all=TRUE)))
stop("Vérifier le fichier codes.csv")
}
intersect(names(Lignes.paie), names(Bulletins.paie))
clé.fusion
if (fusionner.nom.prénom) Bulletins.paie <- subset(Bulletins.paie, select = setdiff(names(Bulletins.paie), c("Nom", "Prénom")))
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
setwd("C:/Users/Public/Dev/altair/Tests/Exemple")
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
if (file.exists[codes.paiement])
Codes.paiement <- read.csv.skip(codes.paiement)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
codes.paiement
file.exists[chemin(codes.paiement)]
file.exists(chemin(codes.paiement)
)
(file.exists(chemin(codes.paiement)))
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
View(Lignes.paie)
View(Bulletins.paie)
View(`Bulletins.paie.nir.total.hors.élus`)
View(`Analyse.rémunérations`)
View(`Analyse.variations.synthèse`)
View(Analyse.variations.par.exercice)
View(`Analyse.rémunérations`)
View(`Analyse.variations.synthèse`)
View(`Bulletins.paie.nir.total.hors.élus`)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
length(années.total.hors.élus)
années.total.hors.élus
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
années.total.hors.élus
Bulletins.paie.nir.fonctionnaires
Bulletins.paie.nir.total.hors.élus
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)) + 1900)
années.total.hors.élus
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
fin.période.sous.revue
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)) + 1900)
années.total.hors.élus
as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
)
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]
)
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3))
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
Bulletins.paie.nir.total.hors.élus
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], width=12)), 2, 3) + 1900))
Bulletins.paie.nir.total.hors.élus[ , champ.nir]
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], width=12)
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], digits=12)
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], scientific=FALSE)
années.fonctionnaires   <- fin.période.sous.revue - (as.numeric(substr(as.character(
format(Bulletins.paie.nir.fonctionnaires[ , champ.nir], scientific = FALSE)), 2, 3)) + 1900)
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], scientific=FALSE)), 2, 3)) + 1900)
années.fonctionnaires
années.total.hors.élus
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
(length(années.fonctionnaires) > 0)
années.fonctionnaires
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
AR
sum(AR[4])
AR[4]
sum(AR[4])
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
rémunérations.élu
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
rémunérations.élu
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
if (fusionner.nom.prénom)
Bulletins.paie <- subset(Bulletins.paie, select = setdiff(names(Bulletins.paie), c("Nom", "Prénom")))
if (!setequal(intersect(names(Lignes.paie), names(Bulletins.paie)), union(c("Mois", "Année"), clé.fusion)))
{
if (fusionner.nom.prénom) {
stop("L'appariement ne peut se faire par les clés Nom, Prénom et Mois")
} else {
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
}
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R')
colonnes.requises
names(Bulletins.paie)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
View(Bulletins.paie)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
View(Bulletins.paie)
nlevels(Bulletins.paie$Année)
levels(Bulletins.paie$Année)
levels(as.factor(Bulletins.paie$Année))
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
champ.nir
clé.fusion
View(Bulletins.paie)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
View(Bulletins.paie)
bulletins.paie
chemin(bulletins.paie)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
View(Bulletins.paie)
Bulletins.paie.contiennent.colonnes.requises
names(Bulletins.paie)
#'---
#'title: false
#'author: false
#'date: false
#'output:
#'html_document:
#'css: style.css
#'---
#'<p class = "centered"><img src = "Altair.bmp" /></p>
#'<p class = "title">RH Exemple</p>
#'
#+ echo = FALSE, warning = TRUE, message = FALSE
# comportement global du programme
# Lorsque l'on n'a que une ou deux années, mettre étudier.variations à FALSE
# Lorsque l'on n'étudie pas une base Xémélios, mettre étudier.tests.statutaires à FALSE
library(compiler)
options(warn = -1, verbose = FALSE, OutDec = ",")
encodage.entrée <- "ISO-8859-1"
# dans cet ordre
try(setwd("Tests/Exemple"), silent = TRUE)
source("prologue.R", encoding = encodage.entrée)
compilerOptions <- setCompilerOptions(suppressAll = TRUE)
JITlevel        <- enableJIT(2)
source(file.path(chemin.dossier, "bibliotheque.fonctions.paie.R"), encoding = encodage.entrée)
installer.paquets(knitr, plyr, ggplot2, assertthat, yaml)
library(knitr)
library(plyr)
library(ggplot2)
library(assertthat)
# problème temporaire avec l'option fig.retina depuis fin mai 2014
knitr::opts_chunk$set(fig.width = 7.5, echo = FALSE, warning = FALSE, message = FALSE, results = 'asis')
dir.create(chemin.dossier.bases, recursive = TRUE)
#'<p class = "centered"><b>Exercices `r paste(début.période.sous.revue, "à", fin.période.sous.revue)` </b></p>
#'<p class = "author">Fabrice Nicol</h1>
#'
#+ echo = FALSE
#'`r format(Sys.Date(), "%a %d %b %Y")`
#'
nombre.exercices <- fin.période.sous.revue - début.période.sous.revue + 1
# Le format est jour/mois/année avec deux chiffres-séparateur-deux chiffres-séparateur-4 chiffres.
# Le séparateur peut être changé en un autre en modifiant le "/" dans date.format
# Cette section pourra être modifiée en entrée dans d'autres contextes
# Matricule, Codes
# Contrôle de cohérence
#  on vérifie que chaque code de paie est associé, dans le fichier codes.paiement (par défaut, codes.csv),
#  que à chaque code donné on a associé un et un seul type de rémunération ("INDEMNITAIRE", "TRAITEMENT", etc.)
if (file.exists(chemin(codes.paiement)))
{
Codes.paiement <- read.csv.skip(codes.paiement)
if (nlevels(as.factor(Codes.paiement$Code)) != nrow(unique(Codes.paiement[ , c(étiquette.code, "Type.rémunération")])))
{
message("Davantage de types de rémunérations que de codes distincts : incohérence de la base de codes.")
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
print(unique(merge(data.frame(Code = names(V),
"Nombre de types de rémunérations distincts" = V,
row.names=NULL),
Codes.paiement[Codes.paiement$Code %in% names(V),
c(étiquette.code, "Type.rémunération")],
by = étiquette.code,
all=TRUE)))
stop("Vérifier le fichier " %+% codes.paiement)
}
message("Chargement des codes de paiement.")
}
fichier.personnels.existe <- file.exists(chemin(nom.fichier.personnels))
if (fichier.personnels.existe)
{
base.personnels.catégorie <- read.csv.skip(nom.fichier.personnels)
message("Chargement du fichier des catégories statutaires des personnels.")
}
# Lignes de paie
# On peut lire jusqu'à 50 fichiers csv de lignes de paie qui seront générés au format :
# "chemin dossier + racine-Lignes de paye-j.csv" où racine est un bref identifiant du type de contrôle (exemple : "c2a", "PEV", ...)
lignes.paie <- nom.fichier.paie %+% "-" %+% 1:50 %+% ".csv"
lignes.paie <- lignes.paie[file.exists(chemin(lignes.paie))]
# Bulletins de paie
# On peut lire jusqu'à 10 fichiers csv de bulletins de paie qui seront générés au format :
# "chemin dossier + racine-Bulletins de paye-j.csv"
bulletins.paie <- nom.bulletin.paie %+% "-" %+% 1:10 %+% ".csv"
bulletins.paie <- bulletins.paie[file.exists(chemin(bulletins.paie))]
# Programme principal
# Bases
# Lignes de paie
# On ne retient que les bases ayant pour années au minimum début.période.sous.revue
# et au maximum fin.période.sous.revue, qui contiennent toutes les colonnes requises
# pour le contrôle
Read.csv("Lignes.paie", lignes.paie)
if (!is.null(Lignes.paie)) message("Chargement des lignes de paie.") else stop("Chargement des lignes de paie en échec.")
Read.csv("Bulletins.paie", bulletins.paie)
if (!is.null(Bulletins.paie)) message("Chargement des bulletins de paie.") else stop("Chargement des bulletins de paie en échec.")
Bulletins.paie <- Bulletins.paie[  Bulletins.paie$Année >= début.période.sous.revue
& Bulletins.paie$Année <= fin.période.sous.revue, ]
Lignes.paie    <- Lignes.paie[  Lignes.paie$Année >= début.période.sous.revue
& Lignes.paie$Année <= fin.période.sous.revue, ]
Bulletins.paie.contiennent.colonnes.requises <- colonnes.requises %in% names(Bulletins.paie)
Bulletins.paie.contiennent.colonnes.requises
names(Bulletins.paie)
sélectionner.clé("Bulletins.paie", "Lignes.paie")
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
années.total.hors.élus
if (length(!is.na(années.total.hors.élus)) > 0)
hist(années.total.hors.élus,
xlab = "Âge au 31 décembre " %+% fin.période.sous.revue,
xlim = c(18, 75),
ylab = "Effectif",
main = "Pyramide des âges",
col = "blue",
nclass = 50)
length(!is.na(années.total.hors.élus))
!is.na(années.total.hors.élus)
if (length(années.total.hors.élus[!is.na(années.total.hors.élus)]) > 0)
hist(années.total.hors.élus,
xlab = "Âge au 31 décembre " %+% fin.période.sous.revue,
xlim = c(18, 75),
ylab = "Effectif",
main = "Pyramide des âges",
col = "blue",
nclass = 50)
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
View(Bulletins.paie.Lignes.paie)
Bulletins.paie.Lignes.paie[Heures.Sup. >= 25, ]
Bulletins.paie.Lignes.paie[Heures.Sup. >= 25, c(étiquette.matricule,
étiquette.année,
"Mois",
"Statut",
"Heures.Sup.")]
unique(Bulletins.paie.Lignes.paie[Heures.Sup. >= 25,
c(étiquette.matricule,
étiquette.année,
"Mois",
"Statut",
"Heures.Sup.")])
expression.rég.heures.sup
Bulletins.paie.Lignes.paie[Heures.Sup. >= 25
& ! Code %in% Codes.paiement.traitement
& ! is.na(Libellé)
& ! is.na(Code)
& ! grepl(".*SMIC.*",
Libellé, ignore.case = TRUE)
& as.numeric(substr(Code,1,2)) < 50
& grepl(expression.rég.heures.sup,
Libellé, ignore.case = TRUE),
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant")]
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% Bulletins.paie.Lignes.paie
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% names(Bulletins.paie.Lignes.paie)
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% colnames(Bulletins.paie.Lignes.paie)
v <- c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant") %in% colnames(Bulletins.paie.Lignes.paie)
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant")[v]
c(étiquette.matricule,
étiquette.année,
"Mois",
"Libellé",
étiquette.code,
"Heures",
"Base",
"Taux",
"Montant")[!v]
source('C:/Users/fnicol/Desktop/altair/github/Tests/Exemple/exemple.R', echo=TRUE)
