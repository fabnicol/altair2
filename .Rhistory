save.image("C:/Users/Public/altair/.RData")
source('C:/Users/Public/Altair/Tests/Exemple/exemple.R', echo=TRUE)
system.tim(source('C:/Users/Public/Altair/Tests/Exemple/exemple.R', echo=TRUE))
system.time(source('C:/Users/Public/Altair/Tests/Exemple/exemple.R', echo=TRUE))
system.time(source('C:/Users/Public/Altair/Tests/Exemple/exemple.R', echo=FALSE))
source('C:/Users/Public/altair/Tests/Exemple/exemple.R', echo=TRUE)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R', echo=TRUE)
source('C:/Users/Public/altair/Tests/Exemple/prologue.R', echo=TRUE)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R', echo=TRUE)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
setwd("C:/Users/Public/altair/Tests/Exemple")
spin("exemple.R")
help(pandoc)
pandoc("exemple.md", format="pdf")
install.packages("pandoc")
install.packages("knitr")
install.packages("knitr")
system("pandoc exemple.md -o exemple.pdf")
getwd()
system("pandoc --help")
system("pandoc")
help(system)
attach(Bulletins.paie.Lignes.paie)
unique(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE", "Matricule"])
unique(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010, "Matricule"])
length(unique(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010, "Matricule"]))
sum(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 & code.paiment[code.paiement$Code == Code, "Type.rémunération"] %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL") , "Montant"])
sum(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 & code.paiement[code.paiement$Code == Code, "Type.rémunération"] %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL") , "Montant"])
sum(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 & codes.paiement[codes.paiement$Code == Code, "Type.rémunération"] %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL") , "Montant"])
Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 & codes.paiement[codes.paiement$Code == Code, "Type.rémunération"] %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL") , "Montant"]
Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 &  , "Montant"]
codes.paiement[codes.paiement$Type.rémunération %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL"), "Code"]
codes.paiement
head(codes.paiement)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R', echo=TRUE)
codes.paiement[codes.paiement$Type.rémunération %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL"), "Code"]
codes.paiement
Codes.paiement[Codes.paiement$Type.rémunération %in% c("TRAITEMENT", "INDEMNITAIRE", "PRINCIPAL.CONTRACTUEL"), "Code"]
Codes.paiement <- read.csv.skip(codes.paiement)
Codes.paiement.indemnitaire <- unique(Codes.paiement[Codes.paiement$Type.rémunération == "INDEMNITAIRE.OU.CONTRACTUEL","Code"])
Codes.paiement.traitement <- unique(Codes.paiement[Codes.paiement$Type.rémunération == "TRAITEMENT","Code"])
Codes.paiement.élu <- unique(Codes.paiement[Codes.paiement$Type.rémunération == "ELU","Code"])
Codes.paiement.vacations <- unique(Codes.paiement[Codes.paiement$Type.rémunération == "VACATIONS","Code"])
Codes.paiement.autres <- unique(Codes.paiement[Codes.paiement$Type.rémunération == "AUTRES","Code"])
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
sum(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 & Code %in% c(Codes.paiement.indemnitaire$Code, Codes.paiement.traitement$Code), "Montant"])
Codes.paiement.indemnitaire
sum(Bulletins.paie.Lignes.paie[Statut == "NON_TITULAIRE" & Année == 2010 & Code %in% c(Codes.paiement.indemnitaire, Codes.paiement.traitement), "Montant"])
sum(Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010 & Code %in% c(Codes.paiement.indemnitaire, Codes.paiement.traitement), "Montant"])
detach(Bulletins.paie.Lignes.paie)
attach(Bulletins.paie)
sum(Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010 & Code %in% c(Codes.paiement.indemnitaire, Codes.paiement.traitement), "Montant"])
sum(Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, "Brut"])
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule, Brut")]
tapply(M, M$Matricule, sum)
tapply(M$Brut, M$Matricule, sum)
M$Brut
M
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule, Brut")]
M
levels(Bulletins.paie$Statut)
Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule, Brut")]
Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule, Brut")]
Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Bulletins.paieAnnée == 2010, c("Matricule, Brut")]
Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Bulletins.paie$Année == 2010, c("Matricule, Brut")]
Bulletins.paie
Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" , c("Matricule, Brut")]
Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE", ]
Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE", c("Matricule", "Brut")]
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule", "Brut")]
tapply(M$Brut, M$Matricule, sum)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010, c("Matricule", "Montant")]
tapply(N$Montant, N$Matricule, sum)
length(tapply(M$Brut, M$Matricule, sum))
length(tapply(N$Montant, N$Matricule, sum))
TN <- tapply(N$Montant, N$Matricule, sum)
TM <- tapply(N$Montant, N$Matricule, sum)
TM <- tapply(M$Montant, M$Matricule, sum)
TM <- tapply(M$Brut, M$Matricule, sum)
TM - TN
(TM/TN - 1)*100
sum(TM)
sum(TN)
N
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.traitement, Codes.indemnitaires), c("Matricule", "Montant")]
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire), c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
(TM/TN - 1)*100
length(TN)
length(TM)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiment.élu), c("Matricule", "Montant")]
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.élu), c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres), c("Matricule", "Montant")]
length(TN)
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 , c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
setdiff(Codes.paiement$Code, c(Codes.paiement.indemnitaire, Codes.paiement.traitement, Codes.paiement.élu, CCodes.paiement.autres))
setdiff(Codes.paiement$Code, c(Codes.paiement.indemnitaire, Codes.paiement.traitement, Codes.paiement.élu, Codes.paiement.autres))
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.indemnitaire, Codes.paiement.traitement, Codes.paiement.élu, Codes.paiement.autres), c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% Codes.paiement$Code, c("Matricule", "Montant")]
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
nlevels(N$Code)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% Codes.paiement$Code, c("Matricule", "Montant", "Code")]
nlevels(N$Code)
N$Code
unique(N$Code)
setdiff(unique(M$Code), unique(N$Code))
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule", "Brut", "Code")]
setdiff(unique(M$Matricule), unique(N$Matricule))
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 13749 & Bulletins.paie.Lignes.paie$Année == 2010, ]
N
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
codes.paiement.généré
sauv.bases(chemin.dossier.bases, "code.paiement.généré")
sauv.bases(chemin.dossier.bases, "codes.paiement.généré")
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
M <- Bulletins.paie[Statut == "NON_TITULAIRE" & Année == 2010, c("Matricule", "Brut", "Code")]
M <- Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Bulletins.paie$Année == 2010, c("Matricule", "Brut", "Code")]
M <- Bulletins.paie[Bulletins.paie$Statut == "NON_TITULAIRE" & Bulletins.paie$Année == 2010, c("Matricule", "Brut")]
TM <- tapply(M$Brut, M$Matricule, sum)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres), c("Matricule", "Montant", "Code")]
N
TN <- tapply(N$Brut, N$Matricule, sum)
TN <- tapply(N$Montant, N$Matricule, sum)
length(TN)
length(TM)
(TM/TN -1)*100
(TM/TN -1)
(TM/TN -1)*100
sum(TM)
sum(TN)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R', echo=TRUE)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.autres, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
sum(TM)
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire, Codes.paiement.élu), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
R <- TM/TN -1
length(TN)
length(TM)
setdiff(unique(M$Matricule), unique(N$Matricule))
M[M$Matricule == 13749]
M[M$Matricule == 13749,]
M[M$Brut > 0, 0]
length(M[M$Brut > 0, "Brut"])
TM
TM == 0
TM[TM] == 0]
TM[TM == 0]
TN[TN == 0]
M[M$Matricule == 17053]
M[M$Matricule == 17053,]
N[N$Matricule == 17053,]
N[N$Matricule == 17064,]
N[N$Matricule == 17073,]
setdiff(M$Matricule, N$Matricule)
M <- M[M$Matricule != 13749,]
TM <- tapply(M$Brut, M$Matricule, sum)
TM - TN
D <- TM - TN
D <- D[abs(D) > 1]
D
lengh(D)
length(D)
M[M$Matricule == 17900,]
N[N$Matricule == 17900, ]
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17900 & Bulletins.paie.Lignes.paie$Année == 2010,]
intersect(Codes.paiement.traitement, Codes.paiement.indemnitaire)
intersect(Codes.paiement.traitement, Codes.paiement.autres)
source('C:/Users/Public/altair/Tests/Exemple/exemple.R')
N <- Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Statut == "NON_TITULAIRE" & Bulletins.paie.Lignes.paie$Année == 2010 & Bulletins.paie.Lignes.paie$Code %in% c(Codes.paiement.traitement, Codes.paiement.indemnitaire), c("Matricule", "Montant", "Code")]
TN <- tapply(N$Montant, N$Matricule, sum)
sum(TN)
N[N$Matricule == 17900, ]
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17900 & Bulletins.paie.Lignes.paie$Année == 2010,]
D
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17844 & Bulletins.paie.Lignes.paie$Année == 2010,]
D
Bulletins.paie.Lignes.paie[Bulletins.paie.Lignes.paie$Matricule == 17786 & Bulletins.paie.Lignes.paie$Année == 2010,]
Lignes.paie[Lignes.paie$Matricule == 17786 & Lignes.paie$Année == 2010,]
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
étiquette.matricule
étiquette.année
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
champ.détection.1
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
Read.csv("Lignes.paie", lignes.paie)
lignes.paie
chemin(lignes.paie)
lignes.paie <- paste0(nom.fichier.paie, "-", 1:50, ".csv")
chemin(lignes.paie)
file.exists(chemin(lignes.paie))
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
Read.csv("Lignes.paie", lignes.paie)
if ( ! all(c(union(clé.fusion, étiquette.matricule),
étiquette.année,
"Mois",
"Statut",
"Brut",
"Net.à.Payer",
"Heures.Sup.",
"Emploi",
champ.nir,
"Temps.de.travail") %in% names(Bulletins.paie))) {
stop("Il manque des colonnes au(x) fichier(s) Bulletins de paie")
} else {
message("Bulletins de paie : contrôle des noms de colonne ... OK")
}
if (tester.matricules)
tester.homogeneite.matricules(Lignes.paie)
if (générer.codes) {
with( Lignes.paie,
codes.paiement.généré <<- unique(Lignes.paie[  Montant > 0 ,
c("Code", étiquette.libellé)]))
codes.paiement.généré <- cbind(codes.paiement.généré[order(substr(as.character(codes.paiement.généré$Code), 1, 3)), ],
character(nrow(codes.paiement.généré)))
names(codes.paiement.généré)[3] <- étiquette.Type.rémunération
sauv.bases(chemin.dossier.bases, "codes.paiement.généré")
#'---
#'
#'# Tableau des codes de paiement
#'
#'##  Renseigner le type de rémunération
#'
#'Utiliser les codes : TRAITEMENT, INDEMNITAIRE.OU.CONTRACTUEL, ELU, AUTRES
#'
kable(codes.paiement.généré, row.names = FALSE)
#'
#'<!-- BREAK -->
if (file.exists(file.path(chemin.dossier.bases, "codes.paiement.généré.csv")))
message("Génération des codes : voir fichier Bases/codes.paiement.généré.csv")
else
message("Les codes n'ont pas été générés.")
stop(" Le programme est arrêté par l'utilisateur.", call.=FALSE)
}
sélectionner.clé("Bulletins.paie", "Lignes.paie")
source('C:/Users/Public/Dev/altair/Tests/Exemple/bibliotheque.fonctions.paie.R', echo=TRUE)
sélectionner.clé("Bulletins.paie", "Lignes.paie")
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
V
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V
nlevels(Codes.paiement$Code)
nrow(unique(Codes.paiement[ , c("Code", "Type.rémunération")]))
class(Code.paiment$Code)
class(Codes.paiment$Code)
(Codes.paiement$Code
)
class(Codes.paiement$Code)
nlevels(as.factor(Codes.paiement$Code))
if (nlevels(as.factor(Codes.paiement$Code)) != nrow(unique(Codes.paiement[ , c("Code", "Type.rémunération")])))
{
message("Davantage de types de rémunérations que de codes distincts : incohérence de la base de codes.")
V <- tapply(Codes.paiement$Type.rémunération, Codes.paiement$Code, function(x) length(unique(x)))
V <- V[V > 1]
print(unique(merge(data.frame(Code = names(V), "Nombre de libellés distincts" = V, row.names=NULL),
Codes.paiement[Codes.paiement$Code %in% names(V), c("Code", "Type.rémunération")],
by = "Code", all=TRUE)))
stop("Vérifier le fichier codes.csv")
}
intersect(names(Lignes.paie), names(Bulletins.paie))
clé.fusion
if (fusionner.nom.prénom) Bulletins.paie <- subset(Bulletins.paie, select = setdiff(names(Bulletins.paie), c("Nom", "Prénom")))
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
setwd("C:/Users/Public/Dev/altair/Tests/Exemple")
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
if (file.exists[codes.paiement])
Codes.paiement <- read.csv.skip(codes.paiement)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
codes.paiement
file.exists[chemin(codes.paiement)]
file.exists(chemin(codes.paiement)
)
(file.exists(chemin(codes.paiement)))
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
View(Lignes.paie)
View(Bulletins.paie)
View(`Bulletins.paie.nir.total.hors.élus`)
View(`Analyse.rémunérations`)
View(`Analyse.variations.synthèse`)
View(Analyse.variations.par.exercice)
View(`Analyse.rémunérations`)
View(`Analyse.variations.synthèse`)
View(`Bulletins.paie.nir.total.hors.élus`)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
length(années.total.hors.élus)
années.total.hors.élus
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
années.total.hors.élus
Bulletins.paie.nir.fonctionnaires
Bulletins.paie.nir.total.hors.élus
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)) + 1900)
années.total.hors.élus
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
fin.période.sous.revue
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)) + 1900)
années.total.hors.élus
as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
)
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]
)
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
as.numeric(substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3))
substr(as.character(Bulletins.paie.nir.total.hors.élus[ , champ.nir]), 2, 3)
Bulletins.paie.nir.total.hors.élus
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], width=12)), 2, 3) + 1900))
Bulletins.paie.nir.total.hors.élus[ , champ.nir]
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], width=12)
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], digits=12)
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], scientific=FALSE)
années.fonctionnaires   <- fin.période.sous.revue - (as.numeric(substr(as.character(
format(Bulletins.paie.nir.fonctionnaires[ , champ.nir], scientific = FALSE)), 2, 3)) + 1900)
années.total.hors.élus  <- fin.période.sous.revue - (as.numeric(substr(as.character(
format(Bulletins.paie.nir.total.hors.élus[ , champ.nir], scientific=FALSE)), 2, 3)) + 1900)
années.fonctionnaires
années.total.hors.élus
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
(length(années.fonctionnaires) > 0)
années.fonctionnaires
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
AR
sum(AR[4])
AR[4]
sum(AR[4])
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
rémunérations.élu
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
rémunérations.élu
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
if (fusionner.nom.prénom)
Bulletins.paie <- subset(Bulletins.paie, select = setdiff(names(Bulletins.paie), c("Nom", "Prénom")))
if (!setequal(intersect(names(Lignes.paie), names(Bulletins.paie)), union(c("Mois", "Année"), clé.fusion)))
{
if (fusionner.nom.prénom) {
stop("L'appariement ne peut se faire par les clés Nom, Prénom et Mois")
} else {
stop("L'appariement ne peut se faire par les clés Matricule et Mois")
}
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('C:/Users/Public/Dev/altair/Tests/Exemple/exemple.R', echo=TRUE)
