% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bibliotheque.fonctions.paie.R
\name{Read.csv}
\alias{Read.csv}
\title{Lecture d'une série de bases CSV}
\usage{
Read.csv(base.string, fichiers, charger = TRUE, colClasses = NA,
  skip = 0, drop = NULL,
  séparateur.liste = séparateur.liste.entrée,
  séparateur.décimal = séparateur.décimal.entrée, rapide = FALSE,
  convertir.encodage = TRUE, encodage = encodage.entrée)
}
\arguments{
\item{base.string}{Vecteur de caractères du nom de l'objet data.table retourné}

\item{fichiers}{Vecteur de chemins de fichiers}

\item{charger}{Booléen : TRUE pour charger les bases, FALSE sinon (sans effet)}

\item{colClasses}{Vecteur de classes ("numeric" ou "character", etc.) caractérisant les colonnes}

\item{skip}{Sauter les N premières lignes}

\item{drop}{Rang de la colonne à supprimer}

\item{séparateur.liste}{Séparateur des champs CSV}

\item{séparateur.décimal}{Séparateur décimal}

\item{rapide}{Accélération parallèle ou pas}

\item{convertir.encodage}{convertir d'encodage (basculer entre Latin-1 et UTF-8)}

\item{encodage}{Encodage de la base d'entrée.}
}
\value{
Objet \code{data.table} résultant de l'empilement des bases lues.
}
\description{
Appelle \link{read.csv.skip} sur chaque base d'une série de chemins et empile les retours en lignes
}
\examples{
test <- data.table(datasets::cars)
res  <- try(Read.csv("base",
                     "test.csv",
                      colClasses = c("integer", "integer"),
                      séparateur.liste = ";",
                      séparateur.décimal = ",",
                      convertir.encodage = FALSE,
                      encodage = "UTF-8",
                      rapide = TRUE),
          silent = FALSE)
if (inherits(res, 'try-error'))
  stop("Problème de lecture de la base de la table bulletins-lignes de Paie")
}
